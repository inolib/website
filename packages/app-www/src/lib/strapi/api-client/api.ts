/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface About
 */
export interface About {
    /**
     * 
     * @type {number}
     * @memberof About
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof About
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof About
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof About
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface AboutCreatedBy
 */
export interface AboutCreatedBy {
    /**
     * 
     * @type {number}
     * @memberof AboutCreatedBy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'registrationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AboutCreatedBy
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInner>}
     * @memberof AboutCreatedBy
     */
    'roles'?: Array<AboutCreatedByRolesInner>;
    /**
     * 
     * @type {boolean}
     * @memberof AboutCreatedBy
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'preferedLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedBy
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedBy
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedBy
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AboutCreatedBy
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AboutCreatedByRolesInner
 */
export interface AboutCreatedByRolesInner {
    /**
     * 
     * @type {number}
     * @memberof AboutCreatedByRolesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'description'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AboutCreatedByRolesInner
     */
    'users'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerPermissionsInner>}
     * @memberof AboutCreatedByRolesInner
     */
    'permissions'?: Array<AboutCreatedByRolesInnerPermissionsInner>;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedByRolesInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedByRolesInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AboutCreatedByRolesInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AboutCreatedByRolesInnerPermissionsInner
 */
export interface AboutCreatedByRolesInnerPermissionsInner {
    /**
     * 
     * @type {number}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'action'?: string;
    /**
     * 
     * @type {any}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'actionParameters'?: any;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'subject'?: string;
    /**
     * 
     * @type {any}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'properties'?: any;
    /**
     * 
     * @type {any}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'conditions'?: any;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'role'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AboutCreatedByRolesInnerPermissionsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AboutCreatedByRolesInnerUsersInner
 */
export interface AboutCreatedByRolesInnerUsersInner {
    /**
     * 
     * @type {number}
     * @memberof AboutCreatedByRolesInnerUsersInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutCreatedByRolesInnerUsersInner
     */
    'documentId'?: string;
}
/**
 * 
 * @export
 * @interface AboutListResponse
 */
export interface AboutListResponse {
    /**
     * 
     * @type {Array<About>}
     * @memberof AboutListResponse
     */
    'data'?: Array<About>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof AboutListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface AboutListResponseMeta
 */
export interface AboutListResponseMeta {
    /**
     * 
     * @type {AboutListResponseMetaPagination}
     * @memberof AboutListResponseMeta
     */
    'pagination'?: AboutListResponseMetaPagination;
}
/**
 * 
 * @export
 * @interface AboutListResponseMetaPagination
 */
export interface AboutListResponseMetaPagination {
    /**
     * 
     * @type {number}
     * @memberof AboutListResponseMetaPagination
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutListResponseMetaPagination
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutListResponseMetaPagination
     */
    'pageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutListResponseMetaPagination
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface AboutLocalizationsInner
 */
export interface AboutLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof AboutLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutLocalizationsInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AboutLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AboutLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AboutLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AboutRequest
 */
export interface AboutRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof AboutRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface AboutRequestData
 */
export interface AboutRequestData {
    /**
     * 
     * @type {string}
     * @memberof AboutRequestData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof AboutRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * @type AboutRequestDataLocalizationsInner
 * @export
 */
export type AboutRequestDataLocalizationsInner = number | string;

/**
 * 
 * @export
 * @interface AboutResponse
 */
export interface AboutResponse {
    /**
     * 
     * @type {About}
     * @memberof AboutResponse
     */
    'data'?: About;
    /**
     * 
     * @type {object}
     * @memberof AboutResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface AccessibilityAudit
 */
export interface AccessibilityAudit {
    /**
     * 
     * @type {number}
     * @memberof AccessibilityAudit
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAudit
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAudit
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAudit
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAudit
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAudit
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof AccessibilityAudit
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AccessibilityAudit
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AccessibilityAudit
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof AccessibilityAudit
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface AccessibilityAuditListResponse
 */
export interface AccessibilityAuditListResponse {
    /**
     * 
     * @type {Array<AccessibilityAudit>}
     * @memberof AccessibilityAuditListResponse
     */
    'data'?: Array<AccessibilityAudit>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof AccessibilityAuditListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface AccessibilityAuditRequest
 */
export interface AccessibilityAuditRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof AccessibilityAuditRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface AccessibilityAuditResponse
 */
export interface AccessibilityAuditResponse {
    /**
     * 
     * @type {AccessibilityAudit}
     * @memberof AccessibilityAuditResponse
     */
    'data'?: AccessibilityAudit;
    /**
     * 
     * @type {object}
     * @memberof AccessibilityAuditResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface AuthForgotPasswordPost200Response
 */
export interface AuthForgotPasswordPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPost200Response
     */
    'ok'?: AuthForgotPasswordPost200ResponseOkEnum;
}

export const AuthForgotPasswordPost200ResponseOkEnum = {
    True: 'true'
} as const;

export type AuthForgotPasswordPost200ResponseOkEnum = typeof AuthForgotPasswordPost200ResponseOkEnum[keyof typeof AuthForgotPasswordPost200ResponseOkEnum];

/**
 * 
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPostRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'passwordConfirmation'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'sent'?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
    True: 'true'
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum = typeof AuthSendEmailConfirmationPost200ResponseSentEnum[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 * 
 * @export
 * @interface Author
 */
export interface Author {
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'bio'?: string;
    /**
     * 
     * @type {AuthorAvatar}
     * @memberof Author
     */
    'avatar'?: AuthorAvatar;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof Author
     */
    'socials'?: any;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'website'?: string;
    /**
     * 
     * @type {Array<AuthorFormationsInner>}
     * @memberof Author
     */
    'formations'?: Array<AuthorFormationsInner>;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Author
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Author
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof Author
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorAvatar
 */
export interface AuthorAvatar {
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatar
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatar
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatar
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof AuthorAvatar
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatar
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof AuthorAvatar
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorAvatar
     */
    'related'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {AuthorAvatarFolder}
     * @memberof AuthorAvatar
     */
    'folder'?: AuthorAvatarFolder;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatar
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatar
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatar
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorAvatar
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorAvatarFolder
 */
export interface AuthorAvatarFolder {
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatarFolder
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatarFolder
     */
    'pathId'?: number;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatarFolder
     */
    'parent'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorAvatarFolder
     */
    'children'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {Array<AuthorAvatarFolderFilesInner>}
     * @memberof AuthorAvatarFolder
     */
    'files'?: Array<AuthorAvatarFolderFilesInner>;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatarFolder
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatarFolder
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolder
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorAvatarFolder
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorAvatarFolderFilesInner
 */
export interface AuthorAvatarFolderFilesInner {
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'related'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'folder'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorAvatarFolderFilesInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorFormationsInner
 */
export interface AuthorFormationsInner {
    /**
     * 
     * @type {number}
     * @memberof AuthorFormationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'titre'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof AuthorFormationsInner
     */
    'illustration'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'contenue'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerAuthor}
     * @memberof AuthorFormationsInner
     */
    'author'?: AuthorFormationsInnerAuthor;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'slug'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof AuthorFormationsInner
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorFormationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorFormationsInnerAuthor
 */
export interface AuthorFormationsInnerAuthor {
    /**
     * 
     * @type {number}
     * @memberof AuthorFormationsInnerAuthor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'bio'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof AuthorFormationsInnerAuthor
     */
    'avatar'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof AuthorFormationsInnerAuthor
     */
    'socials'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'website'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorFormationsInnerAuthor
     */
    'formations'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInnerAuthor
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInnerAuthor
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerAuthor
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorFormationsInnerAuthor
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorFormationsInnerIllustration
 */
export interface AuthorFormationsInnerIllustration {
    /**
     * 
     * @type {number}
     * @memberof AuthorFormationsInnerIllustration
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorFormationsInnerIllustration
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthorFormationsInnerIllustration
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof AuthorFormationsInnerIllustration
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorFormationsInnerIllustration
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof AuthorFormationsInnerIllustration
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorFormationsInnerIllustration
     */
    'related'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInnerIllustration
     */
    'folder'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInnerIllustration
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof AuthorFormationsInnerIllustration
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorFormationsInnerIllustration
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof AuthorFormationsInnerIllustration
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface AuthorListResponse
 */
export interface AuthorListResponse {
    /**
     * 
     * @type {Array<Author>}
     * @memberof AuthorListResponse
     */
    'data'?: Array<Author>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof AuthorListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface AuthorRequest
 */
export interface AuthorRequest {
    /**
     * 
     * @type {AuthorRequestData}
     * @memberof AuthorRequest
     */
    'data': AuthorRequestData;
}
/**
 * 
 * @export
 * @interface AuthorRequestData
 */
export interface AuthorRequestData {
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestData
     */
    'bio'?: string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof AuthorRequestData
     */
    'avatar'?: AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof AuthorRequestData
     */
    'socials'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestData
     */
    'website'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof AuthorRequestData
     */
    'formations'?: Array<AboutRequestDataLocalizationsInner>;
    /**
     * 
     * @type {string}
     * @memberof AuthorRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof AuthorRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface AuthorResponse
 */
export interface AuthorResponse {
    /**
     * 
     * @type {Author}
     * @memberof AuthorResponse
     */
    'data'?: Author;
    /**
     * 
     * @type {object}
     * @memberof AuthorResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface BlogPost
 */
export interface BlogPost {
    /**
     * 
     * @type {number}
     * @memberof BlogPost
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'excerpt'?: string;
    /**
     * 
     * @type {AuthorAvatar}
     * @memberof BlogPost
     */
    'image'?: AuthorAvatar;
    /**
     * 
     * @type {BlogPostAuthor}
     * @memberof BlogPost
     */
    'author'?: BlogPostAuthor;
    /**
     * 
     * @type {Array<BlogPostCategoriesInner>}
     * @memberof BlogPost
     */
    'categories'?: Array<BlogPostCategoriesInner>;
    /**
     * 
     * @type {any}
     * @memberof BlogPost
     */
    'tags'?: any;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'content'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogPost
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPost
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPost
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPost
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogPost
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface BlogPostAuthor
 */
export interface BlogPostAuthor {
    /**
     * 
     * @type {number}
     * @memberof BlogPostAuthor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'bio'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof BlogPostAuthor
     */
    'avatar'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'slug'?: string;
    /**
     * 
     * @type {any}
     * @memberof BlogPostAuthor
     */
    'socials'?: any;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'website'?: string;
    /**
     * 
     * @type {Array<BlogPostAuthorFormationsInner>}
     * @memberof BlogPostAuthor
     */
    'formations'?: Array<BlogPostAuthorFormationsInner>;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostAuthor
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostAuthor
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthor
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogPostAuthor
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface BlogPostAuthorFormationsInner
 */
export interface BlogPostAuthorFormationsInner {
    /**
     * 
     * @type {number}
     * @memberof BlogPostAuthorFormationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'titre'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof BlogPostAuthorFormationsInner
     */
    'illustration'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'contenue'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostAuthorFormationsInner
     */
    'author'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'slug'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogPostAuthorFormationsInner
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostAuthorFormationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostAuthorFormationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPostAuthorFormationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogPostAuthorFormationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface BlogPostCategoriesInner
 */
export interface BlogPostCategoriesInner {
    /**
     * 
     * @type {number}
     * @memberof BlogPostCategoriesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof BlogPostCategoriesInner
     */
    'cover'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {Array<BlogPostCategoriesInnerBlogPostsInner>}
     * @memberof BlogPostCategoriesInner
     */
    'blog_posts'?: Array<BlogPostCategoriesInnerBlogPostsInner>;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostCategoriesInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostCategoriesInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogPostCategoriesInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface BlogPostCategoriesInnerBlogPostsInner
 */
export interface BlogPostCategoriesInnerBlogPostsInner {
    /**
     * 
     * @type {number}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'excerpt'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'image'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'author'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'categories'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {any}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'tags'?: any;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'content'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogPostCategoriesInnerBlogPostsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface BlogPostListResponse
 */
export interface BlogPostListResponse {
    /**
     * 
     * @type {Array<BlogPost>}
     * @memberof BlogPostListResponse
     */
    'data'?: Array<BlogPost>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof BlogPostListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface BlogPostRequest
 */
export interface BlogPostRequest {
    /**
     * 
     * @type {BlogPostRequestData}
     * @memberof BlogPostRequest
     */
    'data': BlogPostRequestData;
}
/**
 * 
 * @export
 * @interface BlogPostRequestData
 */
export interface BlogPostRequestData {
    /**
     * 
     * @type {string}
     * @memberof BlogPostRequestData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostRequestData
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostRequestData
     */
    'excerpt'?: string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof BlogPostRequestData
     */
    'image'?: AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof BlogPostRequestData
     */
    'author'?: AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof BlogPostRequestData
     */
    'categories'?: Array<AboutRequestDataLocalizationsInner>;
    /**
     * 
     * @type {any}
     * @memberof BlogPostRequestData
     */
    'tags'?: any;
    /**
     * 
     * @type {string}
     * @memberof BlogPostRequestData
     */
    'content'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogPostRequestData
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogPostRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof BlogPostRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface BlogPostResponse
 */
export interface BlogPostResponse {
    /**
     * 
     * @type {BlogPost}
     * @memberof BlogPostResponse
     */
    'data'?: BlogPost;
    /**
     * 
     * @type {object}
     * @memberof BlogPostResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface BlogSetting
 */
export interface BlogSetting {
    /**
     * 
     * @type {number}
     * @memberof BlogSetting
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'documentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof BlogSetting
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'description': string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogSetting
     */
    'metadata': SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogSetting
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogSetting
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogSetting
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<BlogSettingLocalizationsInner>}
     * @memberof BlogSetting
     */
    'localizations'?: Array<BlogSettingLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface BlogSettingListResponse
 */
export interface BlogSettingListResponse {
    /**
     * 
     * @type {Array<BlogSetting>}
     * @memberof BlogSettingListResponse
     */
    'data'?: Array<BlogSetting>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof BlogSettingListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface BlogSettingLocalizationsInner
 */
export interface BlogSettingLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof BlogSettingLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {number}
     * @memberof BlogSettingLocalizationsInner
     */
    'pageSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'description'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogSettingLocalizationsInner
     */
    'metadata'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogSettingLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof BlogSettingLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof BlogSettingLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface BlogSettingRequest
 */
export interface BlogSettingRequest {
    /**
     * 
     * @type {BlogSettingRequestData}
     * @memberof BlogSettingRequest
     */
    'data': BlogSettingRequestData;
}
/**
 * 
 * @export
 * @interface BlogSettingRequestData
 */
export interface BlogSettingRequestData {
    /**
     * 
     * @type {number}
     * @memberof BlogSettingRequestData
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingRequestData
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingRequestData
     */
    'description': string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof BlogSettingRequestData
     */
    'metadata': SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogSettingRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof BlogSettingRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface BlogSettingResponse
 */
export interface BlogSettingResponse {
    /**
     * 
     * @type {BlogSetting}
     * @memberof BlogSettingResponse
     */
    'data'?: BlogSetting;
    /**
     * 
     * @type {object}
     * @memberof BlogSettingResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorAvatar}
     * @memberof Category
     */
    'cover'?: AuthorAvatar;
    /**
     * 
     * @type {Array<CategoryBlogPostsInner>}
     * @memberof Category
     */
    'blog_posts'?: Array<CategoryBlogPostsInner>;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Category
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Category
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof Category
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface CategoryBlogPostsInner
 */
export interface CategoryBlogPostsInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryBlogPostsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'excerpt'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof CategoryBlogPostsInner
     */
    'image'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {BlogPostAuthor}
     * @memberof CategoryBlogPostsInner
     */
    'author'?: BlogPostAuthor;
    /**
     * 
     * @type {Array<CategoryBlogPostsInnerCategoriesInner>}
     * @memberof CategoryBlogPostsInner
     */
    'categories'?: Array<CategoryBlogPostsInnerCategoriesInner>;
    /**
     * 
     * @type {any}
     * @memberof CategoryBlogPostsInner
     */
    'tags'?: any;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'content'?: string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof CategoryBlogPostsInner
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof CategoryBlogPostsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof CategoryBlogPostsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof CategoryBlogPostsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface CategoryBlogPostsInnerCategoriesInner
 */
export interface CategoryBlogPostsInnerCategoriesInner {
    /**
     * 
     * @type {number}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'cover'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'blog_posts'?: Array<AboutCreatedByRolesInnerUsersInner>;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof CategoryBlogPostsInnerCategoriesInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface CategoryListResponse
 */
export interface CategoryListResponse {
    /**
     * 
     * @type {Array<Category>}
     * @memberof CategoryListResponse
     */
    'data'?: Array<Category>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof CategoryListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface CategoryRequest
 */
export interface CategoryRequest {
    /**
     * 
     * @type {CategoryRequestData}
     * @memberof CategoryRequest
     */
    'data': CategoryRequestData;
}
/**
 * 
 * @export
 * @interface CategoryRequestData
 */
export interface CategoryRequestData {
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof CategoryRequestData
     */
    'cover'?: AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof CategoryRequestData
     */
    'blog_posts'?: Array<AboutRequestDataLocalizationsInner>;
    /**
     * 
     * @type {string}
     * @memberof CategoryRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof CategoryRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface CategoryResponse
 */
export interface CategoryResponse {
    /**
     * 
     * @type {Category}
     * @memberof CategoryResponse
     */
    'data'?: Category;
    /**
     * 
     * @type {object}
     * @memberof CategoryResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof Contact
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Contact
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof Contact
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface ContactListResponse
 */
export interface ContactListResponse {
    /**
     * 
     * @type {Array<Contact>}
     * @memberof ContactListResponse
     */
    'data'?: Array<Contact>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof ContactListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface ContactRequest
 */
export interface ContactRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof ContactRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
    /**
     * 
     * @type {Contact}
     * @memberof ContactResponse
     */
    'data'?: Contact;
    /**
     * 
     * @type {object}
     * @memberof ContactResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof Course
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Course
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof Course
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface CourseListResponse
 */
export interface CourseListResponse {
    /**
     * 
     * @type {Array<Course>}
     * @memberof CourseListResponse
     */
    'data'?: Array<Course>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof CourseListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface CourseRequest
 */
export interface CourseRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof CourseRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface CourseResponse
 */
export interface CourseResponse {
    /**
     * 
     * @type {Course}
     * @memberof CourseResponse
     */
    'data'?: Course;
    /**
     * 
     * @type {object}
     * @memberof CourseResponse
     */
    'meta'?: object;
}
/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<object> | object;

/**
 * 
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     * 
     * @type {number}
     * @memberof ErrorError
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ErrorError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface Formation
 */
export interface Formation {
    /**
     * 
     * @type {number}
     * @memberof Formation
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'description': string;
    /**
     * 
     * @type {AuthorAvatar}
     * @memberof Formation
     */
    'illustration'?: AuthorAvatar;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'contenue': string;
    /**
     * 
     * @type {BlogPostAuthor}
     * @memberof Formation
     */
    'author'?: BlogPostAuthor;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'slug': string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof Formation
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Formation
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Formation
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Formation
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof Formation
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface FormationListResponse
 */
export interface FormationListResponse {
    /**
     * 
     * @type {Array<Formation>}
     * @memberof FormationListResponse
     */
    'data'?: Array<Formation>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof FormationListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface FormationRequest
 */
export interface FormationRequest {
    /**
     * 
     * @type {FormationRequestData}
     * @memberof FormationRequest
     */
    'data': FormationRequestData;
}
/**
 * 
 * @export
 * @interface FormationRequestData
 */
export interface FormationRequestData {
    /**
     * 
     * @type {string}
     * @memberof FormationRequestData
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof FormationRequestData
     */
    'description': string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof FormationRequestData
     */
    'illustration'?: AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {string}
     * @memberof FormationRequestData
     */
    'contenue': string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof FormationRequestData
     */
    'author'?: AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {string}
     * @memberof FormationRequestData
     */
    'slug': string;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof FormationRequestData
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof FormationRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof FormationRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface FormationResponse
 */
export interface FormationResponse {
    /**
     * 
     * @type {Formation}
     * @memberof FormationResponse
     */
    'data'?: Formation;
    /**
     * 
     * @type {object}
     * @memberof FormationResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface FormationSetting
 */
export interface FormationSetting {
    /**
     * 
     * @type {number}
     * @memberof FormationSetting
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'description': string;
    /**
     * 
     * @type {AuthorAvatar}
     * @memberof FormationSetting
     */
    'heroImage': AuthorAvatar;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'formationTitle': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'formationDescription': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'pedagogicTitle': string;
    /**
     * 
     * @type {Array<FormationsPedagogicApproachComponent>}
     * @memberof FormationSetting
     */
    'pedagogicApproaches'?: Array<FormationsPedagogicApproachComponent>;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof FormationSetting
     */
    'pedagogicImage': AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'whyUsTitle': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'whyUsDescription': string;
    /**
     * 
     * @type {Array<FormationsWhyUsComponent>}
     * @memberof FormationSetting
     */
    'whyUs'?: Array<FormationsWhyUsComponent>;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'certificationTitle': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'certificationDescription': string;
    /**
     * 
     * @type {Array<FormationsCertificationComponent>}
     * @memberof FormationSetting
     */
    'certifications'?: Array<FormationsCertificationComponent>;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof FormationSetting
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof FormationSetting
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof FormationSetting
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof FormationSetting
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<FormationSettingLocalizationsInner>}
     * @memberof FormationSetting
     */
    'localizations'?: Array<FormationSettingLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface FormationSettingListResponse
 */
export interface FormationSettingListResponse {
    /**
     * 
     * @type {Array<FormationSetting>}
     * @memberof FormationSettingListResponse
     */
    'data'?: Array<FormationSetting>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof FormationSettingListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface FormationSettingLocalizationsInner
 */
export interface FormationSettingLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof FormationSettingLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof FormationSettingLocalizationsInner
     */
    'heroImage'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'formationTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'formationDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'pedagogicTitle'?: string;
    /**
     * 
     * @type {Array<FormationsPedagogicApproachComponent>}
     * @memberof FormationSettingLocalizationsInner
     */
    'pedagogicApproaches'?: Array<FormationsPedagogicApproachComponent>;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof FormationSettingLocalizationsInner
     */
    'pedagogicImage'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'whyUsTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'whyUsDescription'?: string;
    /**
     * 
     * @type {Array<FormationsWhyUsComponent>}
     * @memberof FormationSettingLocalizationsInner
     */
    'whyUs'?: Array<FormationsWhyUsComponent>;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'certificationTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'certificationDescription'?: string;
    /**
     * 
     * @type {Array<FormationsCertificationComponent>}
     * @memberof FormationSettingLocalizationsInner
     */
    'certifications'?: Array<FormationsCertificationComponent>;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof FormationSettingLocalizationsInner
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof FormationSettingLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof FormationSettingLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof FormationSettingLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface FormationSettingRequest
 */
export interface FormationSettingRequest {
    /**
     * 
     * @type {FormationSettingRequestData}
     * @memberof FormationSettingRequest
     */
    'data': FormationSettingRequestData;
}
/**
 * 
 * @export
 * @interface FormationSettingRequestData
 */
export interface FormationSettingRequestData {
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'description': string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof FormationSettingRequestData
     */
    'heroImage': AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'formationTitle': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'formationDescription': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'pedagogicTitle': string;
    /**
     * 
     * @type {Array<FormationsPedagogicApproachComponent>}
     * @memberof FormationSettingRequestData
     */
    'pedagogicApproaches'?: Array<FormationsPedagogicApproachComponent>;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof FormationSettingRequestData
     */
    'pedagogicImage': AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'whyUsTitle': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'whyUsDescription': string;
    /**
     * 
     * @type {Array<FormationsWhyUsComponent>}
     * @memberof FormationSettingRequestData
     */
    'whyUs'?: Array<FormationsWhyUsComponent>;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'certificationTitle': string;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'certificationDescription': string;
    /**
     * 
     * @type {Array<FormationsCertificationComponent>}
     * @memberof FormationSettingRequestData
     */
    'certifications'?: Array<FormationsCertificationComponent>;
    /**
     * 
     * @type {SeoSeoMetadataComponent}
     * @memberof FormationSettingRequestData
     */
    'seo'?: SeoSeoMetadataComponent;
    /**
     * 
     * @type {string}
     * @memberof FormationSettingRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof FormationSettingRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface FormationSettingResponse
 */
export interface FormationSettingResponse {
    /**
     * 
     * @type {FormationSetting}
     * @memberof FormationSettingResponse
     */
    'data'?: FormationSetting;
    /**
     * 
     * @type {object}
     * @memberof FormationSettingResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface FormationsCertificationComponent
 */
export interface FormationsCertificationComponent {
    /**
     * 
     * @type {number}
     * @memberof FormationsCertificationComponent
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface FormationsPedagogicApproachComponent
 */
export interface FormationsPedagogicApproachComponent {
    /**
     * 
     * @type {number}
     * @memberof FormationsPedagogicApproachComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FormationsPedagogicApproachComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationsPedagogicApproachComponent
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface FormationsWhyUsComponent
 */
export interface FormationsWhyUsComponent {
    /**
     * 
     * @type {number}
     * @memberof FormationsWhyUsComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FormationsWhyUsComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof FormationsWhyUsComponent
     */
    'description'?: string;
    /**
     * 
     * @type {Array<AuthorFormationsInnerIllustration>}
     * @memberof FormationsWhyUsComponent
     */
    'image'?: Array<AuthorFormationsInnerIllustration>;
}
/**
 * 
 * @export
 * @interface HomePage
 */
export interface HomePage {
    /**
     * 
     * @type {number}
     * @memberof HomePage
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomePage
     */
    'documentId'?: string;
    /**
     * 
     * @type {Array<HomePageRequestDataSectionsInner>}
     * @memberof HomePage
     */
    'sections'?: Array<HomePageRequestDataSectionsInner>;
    /**
     * 
     * @type {string}
     * @memberof HomePage
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomePage
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomePage
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomePage
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomePage
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof HomePage
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<HomePageLocalizationsInner>}
     * @memberof HomePage
     */
    'localizations'?: Array<HomePageLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface HomePageListResponse
 */
export interface HomePageListResponse {
    /**
     * 
     * @type {Array<HomePage>}
     * @memberof HomePageListResponse
     */
    'data'?: Array<HomePage>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof HomePageListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface HomePageLocalizationsInner
 */
export interface HomePageLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof HomePageLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {Array<HomePageRequestDataSectionsInner>}
     * @memberof HomePageLocalizationsInner
     */
    'sections'?: Array<HomePageRequestDataSectionsInner>;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomePageLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomePageLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof HomePageLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface HomePageRequest
 */
export interface HomePageRequest {
    /**
     * 
     * @type {HomePageRequestData}
     * @memberof HomePageRequest
     */
    'data': HomePageRequestData;
}
/**
 * 
 * @export
 * @interface HomePageRequestData
 */
export interface HomePageRequestData {
    /**
     * 
     * @type {Array<HomePageRequestDataSectionsInner>}
     * @memberof HomePageRequestData
     */
    'sections'?: Array<HomePageRequestDataSectionsInner>;
    /**
     * 
     * @type {string}
     * @memberof HomePageRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof HomePageRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface HomePageRequestDataSectionsInner
 */
export interface HomePageRequestDataSectionsInner {
    /**
     * 
     * @type {number}
     * @memberof HomePageRequestDataSectionsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomePageRequestDataSectionsInner
     */
    '__component'?: HomePageRequestDataSectionsInnerComponentEnum;
    /**
     * 
     * @type {any}
     * @memberof HomePageRequestDataSectionsInner
     */
    'title'?: any;
    /**
     * 
     * @type {any}
     * @memberof HomePageRequestDataSectionsInner
     */
    'subtitle'?: any;
    /**
     * 
     * @type {SharedImageComponent}
     * @memberof HomePageRequestDataSectionsInner
     */
    'heroImage'?: SharedImageComponent;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof HomePageRequestDataSectionsInner
     */
    'heroButton'?: Array<SharedButtonComponent>;
}

export const HomePageRequestDataSectionsInnerComponentEnum = {
    SectionHero: 'section.hero'
} as const;

export type HomePageRequestDataSectionsInnerComponentEnum = typeof HomePageRequestDataSectionsInnerComponentEnum[keyof typeof HomePageRequestDataSectionsInnerComponentEnum];

/**
 * 
 * @export
 * @interface HomePageResponse
 */
export interface HomePageResponse {
    /**
     * 
     * @type {HomePage}
     * @memberof HomePageResponse
     */
    'data'?: HomePage;
    /**
     * 
     * @type {object}
     * @memberof HomePageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface HomeSetting
 */
export interface HomeSetting {
    /**
     * 
     * @type {number}
     * @memberof HomeSetting
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'description': string;
    /**
     * 
     * @type {AuthorAvatar}
     * @memberof HomeSetting
     */
    'heroImage': AuthorAvatar;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'partnersTitle': string;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'movingText': string;
    /**
     * 
     * @type {number}
     * @memberof HomeSetting
     */
    'numberOfLastBlogsToShow': number;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomeSetting
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomeSetting
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof HomeSetting
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<HomeSettingLocalizationsInner>}
     * @memberof HomeSetting
     */
    'localizations'?: Array<HomeSettingLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface HomeSettingListResponse
 */
export interface HomeSettingListResponse {
    /**
     * 
     * @type {Array<HomeSetting>}
     * @memberof HomeSettingListResponse
     */
    'data'?: Array<HomeSetting>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof HomeSettingListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface HomeSettingLocalizationsInner
 */
export interface HomeSettingLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof HomeSettingLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'heading'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'description'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof HomeSettingLocalizationsInner
     */
    'heroImage'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'partnersTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'movingText'?: string;
    /**
     * 
     * @type {number}
     * @memberof HomeSettingLocalizationsInner
     */
    'numberOfLastBlogsToShow'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomeSettingLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof HomeSettingLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof HomeSettingLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface HomeSettingRequest
 */
export interface HomeSettingRequest {
    /**
     * 
     * @type {HomeSettingRequestData}
     * @memberof HomeSettingRequest
     */
    'data': HomeSettingRequestData;
}
/**
 * 
 * @export
 * @interface HomeSettingRequestData
 */
export interface HomeSettingRequestData {
    /**
     * 
     * @type {string}
     * @memberof HomeSettingRequestData
     */
    'heading': string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingRequestData
     */
    'description': string;
    /**
     * 
     * @type {AboutRequestDataLocalizationsInner}
     * @memberof HomeSettingRequestData
     */
    'heroImage': AboutRequestDataLocalizationsInner;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingRequestData
     */
    'partnersTitle': string;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingRequestData
     */
    'movingText': string;
    /**
     * 
     * @type {number}
     * @memberof HomeSettingRequestData
     */
    'numberOfLastBlogsToShow': number;
    /**
     * 
     * @type {string}
     * @memberof HomeSettingRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof HomeSettingRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface HomeSettingResponse
 */
export interface HomeSettingResponse {
    /**
     * 
     * @type {HomeSetting}
     * @memberof HomeSettingResponse
     */
    'data'?: HomeSetting;
    /**
     * 
     * @type {object}
     * @memberof HomeSettingResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface LegalMention
 */
export interface LegalMention {
    /**
     * 
     * @type {number}
     * @memberof LegalMention
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof LegalMention
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalMention
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalMention
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalMention
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalMention
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof LegalMention
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof LegalMention
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof LegalMention
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof LegalMention
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface LegalMentionListResponse
 */
export interface LegalMentionListResponse {
    /**
     * 
     * @type {Array<LegalMention>}
     * @memberof LegalMentionListResponse
     */
    'data'?: Array<LegalMention>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof LegalMentionListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface LegalMentionRequest
 */
export interface LegalMentionRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof LegalMentionRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface LegalMentionResponse
 */
export interface LegalMentionResponse {
    /**
     * 
     * @type {LegalMention}
     * @memberof LegalMentionResponse
     */
    'data'?: LegalMention;
    /**
     * 
     * @type {object}
     * @memberof LegalMentionResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorData}
     * @memberof ModelError
     */
    'data'?: ErrorData | null;
    /**
     * 
     * @type {ErrorError}
     * @memberof ModelError
     */
    'error': ErrorError;
}
/**
 * 
 * @export
 * @interface Partner
 */
export interface Partner {
    /**
     * 
     * @type {number}
     * @memberof Partner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Partner
     */
    'documentId'?: string;
    /**
     * 
     * @type {Array<AuthorAvatar>}
     * @memberof Partner
     */
    'logo': Array<AuthorAvatar>;
    /**
     * 
     * @type {number}
     * @memberof Partner
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof Partner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Partner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Partner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Partner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Partner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Partner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<PartnerLocalizationsInner>}
     * @memberof Partner
     */
    'localizations'?: Array<PartnerLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface PartnerListResponse
 */
export interface PartnerListResponse {
    /**
     * 
     * @type {Array<Partner>}
     * @memberof PartnerListResponse
     */
    'data'?: Array<Partner>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof PartnerListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface PartnerLocalizationsInner
 */
export interface PartnerLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof PartnerLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PartnerLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {Array<AuthorFormationsInnerIllustration>}
     * @memberof PartnerLocalizationsInner
     */
    'logo'?: Array<AuthorFormationsInnerIllustration>;
    /**
     * 
     * @type {number}
     * @memberof PartnerLocalizationsInner
     */
    'position'?: number;
    /**
     * 
     * @type {string}
     * @memberof PartnerLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PartnerLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof PartnerLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof PartnerLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof PartnerLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof PartnerLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface PartnerRequest
 */
export interface PartnerRequest {
    /**
     * 
     * @type {PartnerRequestData}
     * @memberof PartnerRequest
     */
    'data': PartnerRequestData;
}
/**
 * 
 * @export
 * @interface PartnerRequestData
 */
export interface PartnerRequestData {
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof PartnerRequestData
     */
    'logo': Array<AboutRequestDataLocalizationsInner>;
    /**
     * 
     * @type {number}
     * @memberof PartnerRequestData
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof PartnerRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof PartnerRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface PartnerResponse
 */
export interface PartnerResponse {
    /**
     * 
     * @type {Partner}
     * @memberof PartnerResponse
     */
    'data'?: Partner;
    /**
     * 
     * @type {object}
     * @memberof PartnerResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface PilotProject
 */
export interface PilotProject {
    /**
     * 
     * @type {number}
     * @memberof PilotProject
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PilotProject
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PilotProject
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PilotProject
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PilotProject
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PilotProject
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof PilotProject
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof PilotProject
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof PilotProject
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof PilotProject
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface PilotProjectListResponse
 */
export interface PilotProjectListResponse {
    /**
     * 
     * @type {Array<PilotProject>}
     * @memberof PilotProjectListResponse
     */
    'data'?: Array<PilotProject>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof PilotProjectListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface PilotProjectRequest
 */
export interface PilotProjectRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof PilotProjectRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface PilotProjectResponse
 */
export interface PilotProjectResponse {
    /**
     * 
     * @type {PilotProject}
     * @memberof PilotProjectResponse
     */
    'data'?: PilotProject;
    /**
     * 
     * @type {object}
     * @memberof PilotProjectResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface PrivacyPolicy
 */
export interface PrivacyPolicy {
    /**
     * 
     * @type {number}
     * @memberof PrivacyPolicy
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PrivacyPolicy
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivacyPolicy
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivacyPolicy
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivacyPolicy
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof PrivacyPolicy
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof PrivacyPolicy
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof PrivacyPolicy
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof PrivacyPolicy
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof PrivacyPolicy
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface PrivacyPolicyListResponse
 */
export interface PrivacyPolicyListResponse {
    /**
     * 
     * @type {Array<PrivacyPolicy>}
     * @memberof PrivacyPolicyListResponse
     */
    'data'?: Array<PrivacyPolicy>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof PrivacyPolicyListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface PrivacyPolicyRequest
 */
export interface PrivacyPolicyRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof PrivacyPolicyRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface PrivacyPolicyResponse
 */
export interface PrivacyPolicyResponse {
    /**
     * 
     * @type {PrivacyPolicy}
     * @memberof PrivacyPolicyResponse
     */
    'data'?: PrivacyPolicy;
    /**
     * 
     * @type {object}
     * @memberof PrivacyPolicyResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface QualiopiCertificate
 */
export interface QualiopiCertificate {
    /**
     * 
     * @type {number}
     * @memberof QualiopiCertificate
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QualiopiCertificate
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualiopiCertificate
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualiopiCertificate
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualiopiCertificate
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof QualiopiCertificate
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof QualiopiCertificate
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof QualiopiCertificate
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof QualiopiCertificate
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof QualiopiCertificate
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface QualiopiCertificateListResponse
 */
export interface QualiopiCertificateListResponse {
    /**
     * 
     * @type {Array<QualiopiCertificate>}
     * @memberof QualiopiCertificateListResponse
     */
    'data'?: Array<QualiopiCertificate>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof QualiopiCertificateListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface QualiopiCertificateRequest
 */
export interface QualiopiCertificateRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof QualiopiCertificateRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface QualiopiCertificateResponse
 */
export interface QualiopiCertificateResponse {
    /**
     * 
     * @type {QualiopiCertificate}
     * @memberof QualiopiCertificateResponse
     */
    'data'?: QualiopiCertificate;
    /**
     * 
     * @type {object}
     * @memberof QualiopiCertificateResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface SectionHeroComponent
 */
export interface SectionHeroComponent {
    /**
     * 
     * @type {number}
     * @memberof SectionHeroComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionHeroComponent
     */
    '__component'?: SectionHeroComponentComponentEnum;
    /**
     * 
     * @type {any}
     * @memberof SectionHeroComponent
     */
    'title'?: any;
    /**
     * 
     * @type {any}
     * @memberof SectionHeroComponent
     */
    'subtitle'?: any;
    /**
     * 
     * @type {SharedImageComponent}
     * @memberof SectionHeroComponent
     */
    'heroImage'?: SharedImageComponent;
    /**
     * 
     * @type {Array<SharedButtonComponent>}
     * @memberof SectionHeroComponent
     */
    'heroButton'?: Array<SharedButtonComponent>;
}

export const SectionHeroComponentComponentEnum = {
    SectionHero: 'section.hero'
} as const;

export type SectionHeroComponentComponentEnum = typeof SectionHeroComponentComponentEnum[keyof typeof SectionHeroComponentComponentEnum];

/**
 * 
 * @export
 * @interface SeoSeoMetadataComponent
 */
export interface SeoSeoMetadataComponent {
    /**
     * 
     * @type {number}
     * @memberof SeoSeoMetadataComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeoSeoMetadataComponent
     */
    'metaTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeoSeoMetadataComponent
     */
    'metaDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof SeoSeoMetadataComponent
     */
    'canonicalURL'?: string;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof SeoSeoMetadataComponent
     */
    'metaImage'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof SeoSeoMetadataComponent
     */
    'metaKeywords'?: string;
}
/**
 * 
 * @export
 * @interface SharedButtonComponent
 */
export interface SharedButtonComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedButtonComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'label'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedButtonComponent
     */
    'ariaLabel'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SharedButtonComponent
     */
    'external'?: boolean;
}
/**
 * 
 * @export
 * @interface SharedImageComponent
 */
export interface SharedImageComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedImageComponent
     */
    'id'?: number;
    /**
     * 
     * @type {AuthorFormationsInnerIllustration}
     * @memberof SharedImageComponent
     */
    'media'?: AuthorFormationsInnerIllustration;
    /**
     * 
     * @type {string}
     * @memberof SharedImageComponent
     */
    'alt'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedImageComponent
     */
    'caption'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SharedImageComponent
     */
    'decorative'?: boolean;
}
/**
 * 
 * @export
 * @interface ShowcaseWebsite
 */
export interface ShowcaseWebsite {
    /**
     * 
     * @type {number}
     * @memberof ShowcaseWebsite
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseWebsite
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseWebsite
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseWebsite
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseWebsite
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseWebsite
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof ShowcaseWebsite
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof ShowcaseWebsite
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof ShowcaseWebsite
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof ShowcaseWebsite
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface ShowcaseWebsiteListResponse
 */
export interface ShowcaseWebsiteListResponse {
    /**
     * 
     * @type {Array<ShowcaseWebsite>}
     * @memberof ShowcaseWebsiteListResponse
     */
    'data'?: Array<ShowcaseWebsite>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof ShowcaseWebsiteListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface ShowcaseWebsiteRequest
 */
export interface ShowcaseWebsiteRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof ShowcaseWebsiteRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface ShowcaseWebsiteResponse
 */
export interface ShowcaseWebsiteResponse {
    /**
     * 
     * @type {ShowcaseWebsite}
     * @memberof ShowcaseWebsiteResponse
     */
    'data'?: ShowcaseWebsite;
    /**
     * 
     * @type {object}
     * @memberof ShowcaseWebsiteResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface TechnicalSupport
 */
export interface TechnicalSupport {
    /**
     * 
     * @type {number}
     * @memberof TechnicalSupport
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSupport
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSupport
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSupport
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSupport
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSupport
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof TechnicalSupport
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof TechnicalSupport
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof TechnicalSupport
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof TechnicalSupport
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface TechnicalSupportListResponse
 */
export interface TechnicalSupportListResponse {
    /**
     * 
     * @type {Array<TechnicalSupport>}
     * @memberof TechnicalSupportListResponse
     */
    'data'?: Array<TechnicalSupport>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof TechnicalSupportListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface TechnicalSupportRequest
 */
export interface TechnicalSupportRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof TechnicalSupportRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface TechnicalSupportResponse
 */
export interface TechnicalSupportResponse {
    /**
     * 
     * @type {TechnicalSupport}
     * @memberof TechnicalSupportResponse
     */
    'data'?: TechnicalSupport;
    /**
     * 
     * @type {object}
     * @memberof TechnicalSupportResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface Testimony
 */
export interface Testimony {
    /**
     * 
     * @type {number}
     * @memberof Testimony
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'authorName': string;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'authorDomain': string;
    /**
     * 
     * @type {number}
     * @memberof Testimony
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof Testimony
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof Testimony
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof Testimony
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<TestimonyLocalizationsInner>}
     * @memberof Testimony
     */
    'localizations'?: Array<TestimonyLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface TestimonyListResponse
 */
export interface TestimonyListResponse {
    /**
     * 
     * @type {Array<Testimony>}
     * @memberof TestimonyListResponse
     */
    'data'?: Array<Testimony>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof TestimonyListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface TestimonyLocalizationsInner
 */
export interface TestimonyLocalizationsInner {
    /**
     * 
     * @type {number}
     * @memberof TestimonyLocalizationsInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'authorName'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'authorDomain'?: string;
    /**
     * 
     * @type {number}
     * @memberof TestimonyLocalizationsInner
     */
    'position'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof TestimonyLocalizationsInner
     */
    'createdBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof TestimonyLocalizationsInner
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof TestimonyLocalizationsInner
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutCreatedByRolesInnerUsersInner>}
     * @memberof TestimonyLocalizationsInner
     */
    'localizations'?: Array<AboutCreatedByRolesInnerUsersInner>;
}
/**
 * 
 * @export
 * @interface TestimonyRequest
 */
export interface TestimonyRequest {
    /**
     * 
     * @type {TestimonyRequestData}
     * @memberof TestimonyRequest
     */
    'data': TestimonyRequestData;
}
/**
 * 
 * @export
 * @interface TestimonyRequestData
 */
export interface TestimonyRequestData {
    /**
     * 
     * @type {string}
     * @memberof TestimonyRequestData
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyRequestData
     */
    'authorName': string;
    /**
     * 
     * @type {string}
     * @memberof TestimonyRequestData
     */
    'authorDomain': string;
    /**
     * 
     * @type {number}
     * @memberof TestimonyRequestData
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof TestimonyRequestData
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutRequestDataLocalizationsInner>}
     * @memberof TestimonyRequestData
     */
    'localizations'?: Array<AboutRequestDataLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface TestimonyResponse
 */
export interface TestimonyResponse {
    /**
     * 
     * @type {Testimony}
     * @memberof TestimonyResponse
     */
    'data'?: Testimony;
    /**
     * 
     * @type {object}
     * @memberof TestimonyResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UploadFile
 */
export interface UploadFile {
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'height'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'formats'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFile
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'provider'?: string;
    /**
     * 
     * @type {object}
     * @memberof UploadFile
     */
    'provider_metadata'?: object;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFile
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UploadIdIdPostRequestFileInfo
 */
export interface UploadIdIdPostRequestFileInfo {
    /**
     * 
     * @type {string}
     * @memberof UploadIdIdPostRequestFileInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadIdIdPostRequestFileInfo
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadIdIdPostRequestFileInfo
     */
    'caption'?: string;
}
/**
 * 
 * @export
 * @interface UserTest
 */
export interface UserTest {
    /**
     * 
     * @type {number}
     * @memberof UserTest
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserTest
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTest
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTest
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTest
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof UserTest
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof UserTest
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof UserTest
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof UserTest
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface UserTestListResponse
 */
export interface UserTestListResponse {
    /**
     * 
     * @type {Array<UserTest>}
     * @memberof UserTestListResponse
     */
    'data'?: Array<UserTest>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof UserTestListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface UserTestRequest
 */
export interface UserTestRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof UserTestRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface UserTestResponse
 */
export interface UserTestResponse {
    /**
     * 
     * @type {UserTest}
     * @memberof UserTestResponse
     */
    'data'?: UserTest;
    /**
     * 
     * @type {object}
     * @memberof UserTestResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsPermissionsGet200Response
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
    /**
     * every controller of the api
     * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
     * @memberof UsersPermissionsPermissionsTreeValue
     */
    'controllers'?: { [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'policy'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRole
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
    /**
     * 
     * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
     * @memberof UsersPermissionsRolesGet200Response
     */
    'roles'?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'nb_users'?: number;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPermissionsRolesIdGet200Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * 
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRegistration
     */
    'jwt'?: string;
    /**
     * 
     * @type {UsersPermissionsUser}
     * @memberof UsersPermissionsUserRegistration
     */
    'user'?: UsersPermissionsUser;
}
/**
 * 
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
    /**
     * 
     * @type {number}
     * @memberof UsersPost201Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPost201Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface WebDevelopment
 */
export interface WebDevelopment {
    /**
     * 
     * @type {number}
     * @memberof WebDevelopment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof WebDevelopment
     */
    'documentId'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebDevelopment
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebDevelopment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebDevelopment
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof WebDevelopment
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {AboutCreatedBy}
     * @memberof WebDevelopment
     */
    'createdBy'?: AboutCreatedBy;
    /**
     * 
     * @type {AboutCreatedByRolesInnerUsersInner}
     * @memberof WebDevelopment
     */
    'updatedBy'?: AboutCreatedByRolesInnerUsersInner;
    /**
     * 
     * @type {string}
     * @memberof WebDevelopment
     */
    'locale'?: string;
    /**
     * 
     * @type {Array<AboutLocalizationsInner>}
     * @memberof WebDevelopment
     */
    'localizations'?: Array<AboutLocalizationsInner>;
}
/**
 * 
 * @export
 * @interface WebDevelopmentListResponse
 */
export interface WebDevelopmentListResponse {
    /**
     * 
     * @type {Array<WebDevelopment>}
     * @memberof WebDevelopmentListResponse
     */
    'data'?: Array<WebDevelopment>;
    /**
     * 
     * @type {AboutListResponseMeta}
     * @memberof WebDevelopmentListResponse
     */
    'meta'?: AboutListResponseMeta;
}
/**
 * 
 * @export
 * @interface WebDevelopmentRequest
 */
export interface WebDevelopmentRequest {
    /**
     * 
     * @type {AboutRequestData}
     * @memberof WebDevelopmentRequest
     */
    'data': AboutRequestData;
}
/**
 * 
 * @export
 * @interface WebDevelopmentResponse
 */
export interface WebDevelopmentResponse {
    /**
     * 
     * @type {WebDevelopment}
     * @memberof WebDevelopmentResponse
     */
    'data'?: WebDevelopment;
    /**
     * 
     * @type {object}
     * @memberof WebDevelopmentResponse
     */
    'meta'?: object;
}

/**
 * AboutApi - axios parameter creator
 * @export
 */
export const AboutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAbout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AboutRequest} aboutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAbout: async (aboutRequest: AboutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aboutRequest' is not null or undefined
            assertParamExists('putAbout', 'aboutRequest', aboutRequest)
            const localVarPath = `/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aboutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AboutApi - functional programming interface
 * @export
 */
export const AboutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AboutApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAbout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAbout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AboutApi.deleteAbout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbout(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbout(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AboutApi.getAbout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AboutRequest} aboutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAbout(aboutRequest: AboutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAbout(aboutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AboutApi.putAbout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AboutApi - factory interface
 * @export
 */
export const AboutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AboutApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAbout(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteAbout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AboutApiGetAboutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbout(requestParameters: AboutApiGetAboutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AboutResponse> {
            return localVarFp.getAbout(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AboutApiPutAboutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAbout(requestParameters: AboutApiPutAboutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AboutResponse> {
            return localVarFp.putAbout(requestParameters.aboutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAbout operation in AboutApi.
 * @export
 * @interface AboutApiGetAboutRequest
 */
export interface AboutApiGetAboutRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AboutApiGetAbout
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof AboutApiGetAbout
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AboutApiGetAbout
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AboutApiGetAbout
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AboutApiGetAbout
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AboutApiGetAbout
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AboutApiGetAbout
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AboutApiGetAbout
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof AboutApiGetAbout
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof AboutApiGetAbout
     */
    readonly locale?: string
}

/**
 * Request parameters for putAbout operation in AboutApi.
 * @export
 * @interface AboutApiPutAboutRequest
 */
export interface AboutApiPutAboutRequest {
    /**
     * 
     * @type {AboutRequest}
     * @memberof AboutApiPutAbout
     */
    readonly aboutRequest: AboutRequest
}

/**
 * AboutApi - object-oriented interface
 * @export
 * @class AboutApi
 * @extends {BaseAPI}
 */
export class AboutApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public deleteAbout(options?: RawAxiosRequestConfig) {
        return AboutApiFp(this.configuration).deleteAbout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutApiGetAboutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public getAbout(requestParameters: AboutApiGetAboutRequest = {}, options?: RawAxiosRequestConfig) {
        return AboutApiFp(this.configuration).getAbout(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutApiPutAboutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutApi
     */
    public putAbout(requestParameters: AboutApiPutAboutRequest, options?: RawAxiosRequestConfig) {
        return AboutApiFp(this.configuration).putAbout(requestParameters.aboutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AccessibilityAuditApi - axios parameter creator
 * @export
 */
export const AccessibilityAuditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessibilityAudit: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accessibility-audit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessibilityAudit: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/accessibility-audit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccessibilityAuditRequest} accessibilityAuditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccessibilityAudit: async (accessibilityAuditRequest: AccessibilityAuditRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accessibilityAuditRequest' is not null or undefined
            assertParamExists('putAccessibilityAudit', 'accessibilityAuditRequest', accessibilityAuditRequest)
            const localVarPath = `/accessibility-audit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accessibilityAuditRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessibilityAuditApi - functional programming interface
 * @export
 */
export const AccessibilityAuditApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessibilityAuditApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccessibilityAudit(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccessibilityAudit(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccessibilityAuditApi.deleteAccessibilityAudit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccessibilityAudit(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessibilityAuditResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccessibilityAudit(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccessibilityAuditApi.getAccessibilityAudit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AccessibilityAuditRequest} accessibilityAuditRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAccessibilityAudit(accessibilityAuditRequest: AccessibilityAuditRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessibilityAuditResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAccessibilityAudit(accessibilityAuditRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccessibilityAuditApi.putAccessibilityAudit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccessibilityAuditApi - factory interface
 * @export
 */
export const AccessibilityAuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessibilityAuditApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccessibilityAudit(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteAccessibilityAudit(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccessibilityAuditApiGetAccessibilityAuditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccessibilityAudit(requestParameters: AccessibilityAuditApiGetAccessibilityAuditRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AccessibilityAuditResponse> {
            return localVarFp.getAccessibilityAudit(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccessibilityAuditApiPutAccessibilityAuditRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccessibilityAudit(requestParameters: AccessibilityAuditApiPutAccessibilityAuditRequest, options?: RawAxiosRequestConfig): AxiosPromise<AccessibilityAuditResponse> {
            return localVarFp.putAccessibilityAudit(requestParameters.accessibilityAuditRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccessibilityAudit operation in AccessibilityAuditApi.
 * @export
 * @interface AccessibilityAuditApiGetAccessibilityAuditRequest
 */
export interface AccessibilityAuditApiGetAccessibilityAuditRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof AccessibilityAuditApiGetAccessibilityAudit
     */
    readonly locale?: string
}

/**
 * Request parameters for putAccessibilityAudit operation in AccessibilityAuditApi.
 * @export
 * @interface AccessibilityAuditApiPutAccessibilityAuditRequest
 */
export interface AccessibilityAuditApiPutAccessibilityAuditRequest {
    /**
     * 
     * @type {AccessibilityAuditRequest}
     * @memberof AccessibilityAuditApiPutAccessibilityAudit
     */
    readonly accessibilityAuditRequest: AccessibilityAuditRequest
}

/**
 * AccessibilityAuditApi - object-oriented interface
 * @export
 * @class AccessibilityAuditApi
 * @extends {BaseAPI}
 */
export class AccessibilityAuditApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityAuditApi
     */
    public deleteAccessibilityAudit(options?: RawAxiosRequestConfig) {
        return AccessibilityAuditApiFp(this.configuration).deleteAccessibilityAudit(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccessibilityAuditApiGetAccessibilityAuditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityAuditApi
     */
    public getAccessibilityAudit(requestParameters: AccessibilityAuditApiGetAccessibilityAuditRequest = {}, options?: RawAxiosRequestConfig) {
        return AccessibilityAuditApiFp(this.configuration).getAccessibilityAudit(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccessibilityAuditApiPutAccessibilityAuditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessibilityAuditApi
     */
    public putAccessibilityAudit(requestParameters: AccessibilityAuditApiPutAccessibilityAuditRequest, options?: RawAxiosRequestConfig) {
        return AccessibilityAuditApiFp(this.configuration).putAccessibilityAudit(requestParameters.accessibilityAuditRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorApi - axios parameter creator
 * @export
 */
export const AuthorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAuthorsId', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAuthorsId', 'id', id)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthorRequest} authorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthors: async (authorRequest: AuthorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorRequest' is not null or undefined
            assertParamExists('postAuthors', 'authorRequest', authorRequest)
            const localVarPath = `/authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AuthorRequest} authorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthorsId: async (id: number, authorRequest: AuthorRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAuthorsId', 'id', id)
            // verify required parameter 'authorRequest' is not null or undefined
            assertParamExists('putAuthorsId', 'authorRequest', authorRequest)
            const localVarPath = `/authors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorApi - functional programming interface
 * @export
 */
export const AuthorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthorsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthorsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorApi.deleteAuthorsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthors(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthors(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorApi.getAuthors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthorsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthorsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorApi.getAuthorsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AuthorRequest} authorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthors(authorRequest: AuthorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthors(authorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorApi.postAuthors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AuthorRequest} authorRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAuthorsId(id: number, authorRequest: AuthorRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAuthorsId(id, authorRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorApi.putAuthorsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorApi - factory interface
 * @export
 */
export const AuthorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthorApiDeleteAuthorsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthorsId(requestParameters: AuthorApiDeleteAuthorsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteAuthorsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthorApiGetAuthorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors(requestParameters: AuthorApiGetAuthorsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuthorListResponse> {
            return localVarFp.getAuthors(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthorApiGetAuthorsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthorsId(requestParameters: AuthorApiGetAuthorsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorResponse> {
            return localVarFp.getAuthorsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthorApiPostAuthorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthors(requestParameters: AuthorApiPostAuthorsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorResponse> {
            return localVarFp.postAuthors(requestParameters.authorRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthorApiPutAuthorsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthorsId(requestParameters: AuthorApiPutAuthorsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorResponse> {
            return localVarFp.putAuthorsId(requestParameters.id, requestParameters.authorRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAuthorsId operation in AuthorApi.
 * @export
 * @interface AuthorApiDeleteAuthorsIdRequest
 */
export interface AuthorApiDeleteAuthorsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthorApiDeleteAuthorsId
     */
    readonly id: number
}

/**
 * Request parameters for getAuthors operation in AuthorApi.
 * @export
 * @interface AuthorApiGetAuthorsRequest
 */
export interface AuthorApiGetAuthorsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AuthorApiGetAuthors
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof AuthorApiGetAuthors
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AuthorApiGetAuthors
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AuthorApiGetAuthors
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AuthorApiGetAuthors
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AuthorApiGetAuthors
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AuthorApiGetAuthors
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AuthorApiGetAuthors
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof AuthorApiGetAuthors
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof AuthorApiGetAuthors
     */
    readonly locale?: string
}

/**
 * Request parameters for getAuthorsId operation in AuthorApi.
 * @export
 * @interface AuthorApiGetAuthorsIdRequest
 */
export interface AuthorApiGetAuthorsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthorApiGetAuthorsId
     */
    readonly id: number
}

/**
 * Request parameters for postAuthors operation in AuthorApi.
 * @export
 * @interface AuthorApiPostAuthorsRequest
 */
export interface AuthorApiPostAuthorsRequest {
    /**
     * 
     * @type {AuthorRequest}
     * @memberof AuthorApiPostAuthors
     */
    readonly authorRequest: AuthorRequest
}

/**
 * Request parameters for putAuthorsId operation in AuthorApi.
 * @export
 * @interface AuthorApiPutAuthorsIdRequest
 */
export interface AuthorApiPutAuthorsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthorApiPutAuthorsId
     */
    readonly id: number

    /**
     * 
     * @type {AuthorRequest}
     * @memberof AuthorApiPutAuthorsId
     */
    readonly authorRequest: AuthorRequest
}

/**
 * AuthorApi - object-oriented interface
 * @export
 * @class AuthorApi
 * @extends {BaseAPI}
 */
export class AuthorApi extends BaseAPI {
    /**
     * 
     * @param {AuthorApiDeleteAuthorsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public deleteAuthorsId(requestParameters: AuthorApiDeleteAuthorsIdRequest, options?: RawAxiosRequestConfig) {
        return AuthorApiFp(this.configuration).deleteAuthorsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthorApiGetAuthorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public getAuthors(requestParameters: AuthorApiGetAuthorsRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthorApiFp(this.configuration).getAuthors(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthorApiGetAuthorsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public getAuthorsId(requestParameters: AuthorApiGetAuthorsIdRequest, options?: RawAxiosRequestConfig) {
        return AuthorApiFp(this.configuration).getAuthorsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthorApiPostAuthorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public postAuthors(requestParameters: AuthorApiPostAuthorsRequest, options?: RawAxiosRequestConfig) {
        return AuthorApiFp(this.configuration).postAuthors(requestParameters.authorRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthorApiPutAuthorsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorApi
     */
    public putAuthorsId(requestParameters: AuthorApiPutAuthorsIdRequest, options?: RawAxiosRequestConfig) {
        return AuthorApiFp(this.configuration).putAuthorsId(requestParameters.id, requestParameters.authorRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BlogPostApi - axios parameter creator
 * @export
 */
export const BlogPostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogPostsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBlogPostsId', 'id', id)
            const localVarPath = `/blog-posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPosts: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog-posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPostsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBlogPostsId', 'id', id)
            const localVarPath = `/blog-posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogPostRequest} blogPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogPosts: async (blogPostRequest: BlogPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogPostRequest' is not null or undefined
            assertParamExists('postBlogPosts', 'blogPostRequest', blogPostRequest)
            const localVarPath = `/blog-posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogPostRequest} blogPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogPostsId: async (id: number, blogPostRequest: BlogPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBlogPostsId', 'id', id)
            // verify required parameter 'blogPostRequest' is not null or undefined
            assertParamExists('putBlogPostsId', 'blogPostRequest', blogPostRequest)
            const localVarPath = `/blog-posts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogPostApi - functional programming interface
 * @export
 */
export const BlogPostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogPostApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlogPostsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlogPostsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPostApi.deleteBlogPostsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogPosts(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogPosts(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPostApi.getBlogPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogPostsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogPostsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPostApi.getBlogPostsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BlogPostRequest} blogPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBlogPosts(blogPostRequest: BlogPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBlogPosts(blogPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPostApi.postBlogPosts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogPostRequest} blogPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBlogPostsId(id: number, blogPostRequest: BlogPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogPostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBlogPostsId(id, blogPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogPostApi.putBlogPostsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BlogPostApi - factory interface
 * @export
 */
export const BlogPostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogPostApiFp(configuration)
    return {
        /**
         * 
         * @param {BlogPostApiDeleteBlogPostsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogPostsId(requestParameters: BlogPostApiDeleteBlogPostsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteBlogPostsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPostApiGetBlogPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPosts(requestParameters: BlogPostApiGetBlogPostsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BlogPostListResponse> {
            return localVarFp.getBlogPosts(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPostApiGetBlogPostsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogPostsId(requestParameters: BlogPostApiGetBlogPostsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogPostResponse> {
            return localVarFp.getBlogPostsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPostApiPostBlogPostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogPosts(requestParameters: BlogPostApiPostBlogPostsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogPostResponse> {
            return localVarFp.postBlogPosts(requestParameters.blogPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogPostApiPutBlogPostsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogPostsId(requestParameters: BlogPostApiPutBlogPostsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogPostResponse> {
            return localVarFp.putBlogPostsId(requestParameters.id, requestParameters.blogPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBlogPostsId operation in BlogPostApi.
 * @export
 * @interface BlogPostApiDeleteBlogPostsIdRequest
 */
export interface BlogPostApiDeleteBlogPostsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogPostApiDeleteBlogPostsId
     */
    readonly id: number
}

/**
 * Request parameters for getBlogPosts operation in BlogPostApi.
 * @export
 * @interface BlogPostApiGetBlogPostsRequest
 */
export interface BlogPostApiGetBlogPostsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof BlogPostApiGetBlogPosts
     */
    readonly locale?: string
}

/**
 * Request parameters for getBlogPostsId operation in BlogPostApi.
 * @export
 * @interface BlogPostApiGetBlogPostsIdRequest
 */
export interface BlogPostApiGetBlogPostsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogPostApiGetBlogPostsId
     */
    readonly id: number
}

/**
 * Request parameters for postBlogPosts operation in BlogPostApi.
 * @export
 * @interface BlogPostApiPostBlogPostsRequest
 */
export interface BlogPostApiPostBlogPostsRequest {
    /**
     * 
     * @type {BlogPostRequest}
     * @memberof BlogPostApiPostBlogPosts
     */
    readonly blogPostRequest: BlogPostRequest
}

/**
 * Request parameters for putBlogPostsId operation in BlogPostApi.
 * @export
 * @interface BlogPostApiPutBlogPostsIdRequest
 */
export interface BlogPostApiPutBlogPostsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogPostApiPutBlogPostsId
     */
    readonly id: number

    /**
     * 
     * @type {BlogPostRequest}
     * @memberof BlogPostApiPutBlogPostsId
     */
    readonly blogPostRequest: BlogPostRequest
}

/**
 * BlogPostApi - object-oriented interface
 * @export
 * @class BlogPostApi
 * @extends {BaseAPI}
 */
export class BlogPostApi extends BaseAPI {
    /**
     * 
     * @param {BlogPostApiDeleteBlogPostsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostApi
     */
    public deleteBlogPostsId(requestParameters: BlogPostApiDeleteBlogPostsIdRequest, options?: RawAxiosRequestConfig) {
        return BlogPostApiFp(this.configuration).deleteBlogPostsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPostApiGetBlogPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostApi
     */
    public getBlogPosts(requestParameters: BlogPostApiGetBlogPostsRequest = {}, options?: RawAxiosRequestConfig) {
        return BlogPostApiFp(this.configuration).getBlogPosts(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPostApiGetBlogPostsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostApi
     */
    public getBlogPostsId(requestParameters: BlogPostApiGetBlogPostsIdRequest, options?: RawAxiosRequestConfig) {
        return BlogPostApiFp(this.configuration).getBlogPostsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPostApiPostBlogPostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostApi
     */
    public postBlogPosts(requestParameters: BlogPostApiPostBlogPostsRequest, options?: RawAxiosRequestConfig) {
        return BlogPostApiFp(this.configuration).postBlogPosts(requestParameters.blogPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogPostApiPutBlogPostsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogPostApi
     */
    public putBlogPostsId(requestParameters: BlogPostApiPutBlogPostsIdRequest, options?: RawAxiosRequestConfig) {
        return BlogPostApiFp(this.configuration).putBlogPostsId(requestParameters.id, requestParameters.blogPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BlogSettingApi - axios parameter creator
 * @export
 */
export const BlogSettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogSetting: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogSetting: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogSettingRequest} blogSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogSetting: async (blogSettingRequest: BlogSettingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogSettingRequest' is not null or undefined
            assertParamExists('putBlogSetting', 'blogSettingRequest', blogSettingRequest)
            const localVarPath = `/blog-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogSettingApi - functional programming interface
 * @export
 */
export const BlogSettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogSettingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlogSetting(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlogSetting(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogSettingApi.deleteBlogSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogSetting(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogSetting(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogSettingApi.getBlogSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BlogSettingRequest} blogSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBlogSetting(blogSettingRequest: BlogSettingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBlogSetting(blogSettingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BlogSettingApi.putBlogSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BlogSettingApi - factory interface
 * @export
 */
export const BlogSettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogSettingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogSetting(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteBlogSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogSettingApiGetBlogSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogSetting(requestParameters: BlogSettingApiGetBlogSettingRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BlogSettingResponse> {
            return localVarFp.getBlogSetting(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogSettingApiPutBlogSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogSetting(requestParameters: BlogSettingApiPutBlogSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlogSettingResponse> {
            return localVarFp.putBlogSetting(requestParameters.blogSettingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBlogSetting operation in BlogSettingApi.
 * @export
 * @interface BlogSettingApiGetBlogSettingRequest
 */
export interface BlogSettingApiGetBlogSettingRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof BlogSettingApiGetBlogSetting
     */
    readonly locale?: string
}

/**
 * Request parameters for putBlogSetting operation in BlogSettingApi.
 * @export
 * @interface BlogSettingApiPutBlogSettingRequest
 */
export interface BlogSettingApiPutBlogSettingRequest {
    /**
     * 
     * @type {BlogSettingRequest}
     * @memberof BlogSettingApiPutBlogSetting
     */
    readonly blogSettingRequest: BlogSettingRequest
}

/**
 * BlogSettingApi - object-oriented interface
 * @export
 * @class BlogSettingApi
 * @extends {BaseAPI}
 */
export class BlogSettingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogSettingApi
     */
    public deleteBlogSetting(options?: RawAxiosRequestConfig) {
        return BlogSettingApiFp(this.configuration).deleteBlogSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogSettingApiGetBlogSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogSettingApi
     */
    public getBlogSetting(requestParameters: BlogSettingApiGetBlogSettingRequest = {}, options?: RawAxiosRequestConfig) {
        return BlogSettingApiFp(this.configuration).getBlogSetting(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogSettingApiPutBlogSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogSettingApi
     */
    public putBlogSetting(requestParameters: BlogSettingApiPutBlogSettingRequest, options?: RawAxiosRequestConfig) {
        return BlogSettingApiFp(this.configuration).putBlogSetting(requestParameters.blogSettingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCategoriesId', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories: async (categoryRequest: CategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('postCategories', 'categoryRequest', categoryRequest)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId: async (id: number, categoryRequest: CategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCategoriesId', 'id', id)
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('putCategoriesId', 'categoryRequest', categoryRequest)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategoriesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategoriesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.deleteCategoriesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.getCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.getCategoriesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCategories(categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCategories(categoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.postCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCategoriesId(id: number, categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCategoriesId(id, categoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.putCategoriesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(requestParameters: CategoryApiGetCategoriesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CategoryListResponse> {
            return localVarFp.getCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.getCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.postCategories(requestParameters.categoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<CategoryResponse> {
            return localVarFp.putCategoriesId(requestParameters.id, requestParameters.categoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiDeleteCategoriesIdRequest
 */
export interface CategoryApiDeleteCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiDeleteCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for getCategories operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoriesRequest
 */
export interface CategoryApiGetCategoriesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof CategoryApiGetCategories
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof CategoryApiGetCategories
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof CategoryApiGetCategories
     */
    readonly locale?: string
}

/**
 * Request parameters for getCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiGetCategoriesIdRequest
 */
export interface CategoryApiGetCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiGetCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for postCategories operation in CategoryApi.
 * @export
 * @interface CategoryApiPostCategoriesRequest
 */
export interface CategoryApiPostCategoriesRequest {
    /**
     * 
     * @type {CategoryRequest}
     * @memberof CategoryApiPostCategories
     */
    readonly categoryRequest: CategoryRequest
}

/**
 * Request parameters for putCategoriesId operation in CategoryApi.
 * @export
 * @interface CategoryApiPutCategoriesIdRequest
 */
export interface CategoryApiPutCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CategoryApiPutCategoriesId
     */
    readonly id: number

    /**
     * 
     * @type {CategoryRequest}
     * @memberof CategoryApiPutCategoriesId
     */
    readonly categoryRequest: CategoryRequest
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {CategoryApiDeleteCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public deleteCategoriesId(requestParameters: CategoryApiDeleteCategoriesIdRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).deleteCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategories(requestParameters: CategoryApiGetCategoriesRequest = {}, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiGetCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public getCategoriesId(requestParameters: CategoryApiGetCategoriesIdRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).getCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiPostCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public postCategories(requestParameters: CategoryApiPostCategoriesRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).postCategories(requestParameters.categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryApiPutCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public putCategoriesId(requestParameters: CategoryApiPutCategoriesIdRequest, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).putCategoriesId(requestParameters.id, requestParameters.categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContactApi - axios parameter creator
 * @export
 */
export const ContactApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ContactRequest} contactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContact: async (contactRequest: ContactRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactRequest' is not null or undefined
            assertParamExists('putContact', 'contactRequest', contactRequest)
            const localVarPath = `/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactApi - functional programming interface
 * @export
 */
export const ContactApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContact(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContact(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.deleteContact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContact(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.getContact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ContactRequest} contactRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putContact(contactRequest: ContactRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putContact(contactRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactApi.putContact']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactApi - factory interface
 * @export
 */
export const ContactApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteContact(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContactApiGetContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact(requestParameters: ContactApiGetContactRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ContactResponse> {
            return localVarFp.getContact(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ContactApiPutContactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContact(requestParameters: ContactApiPutContactRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactResponse> {
            return localVarFp.putContact(requestParameters.contactRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getContact operation in ContactApi.
 * @export
 * @interface ContactApiGetContactRequest
 */
export interface ContactApiGetContactRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ContactApiGetContact
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ContactApiGetContact
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ContactApiGetContact
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ContactApiGetContact
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ContactApiGetContact
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ContactApiGetContact
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ContactApiGetContact
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ContactApiGetContact
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof ContactApiGetContact
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof ContactApiGetContact
     */
    readonly locale?: string
}

/**
 * Request parameters for putContact operation in ContactApi.
 * @export
 * @interface ContactApiPutContactRequest
 */
export interface ContactApiPutContactRequest {
    /**
     * 
     * @type {ContactRequest}
     * @memberof ContactApiPutContact
     */
    readonly contactRequest: ContactRequest
}

/**
 * ContactApi - object-oriented interface
 * @export
 * @class ContactApi
 * @extends {BaseAPI}
 */
export class ContactApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public deleteContact(options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).deleteContact(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContactApiGetContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public getContact(requestParameters: ContactApiGetContactRequest = {}, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).getContact(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ContactApiPutContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactApi
     */
    public putContact(requestParameters: ContactApiPutContactRequest, options?: RawAxiosRequestConfig) {
        return ContactApiFp(this.configuration).putContact(requestParameters.contactRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CourseRequest} courseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCourse: async (courseRequest: CourseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseRequest' is not null or undefined
            assertParamExists('putCourse', 'courseRequest', courseRequest)
            const localVarPath = `/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.deleteCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourse(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourse(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.getCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CourseRequest} courseRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCourse(courseRequest: CourseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCourse(courseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CourseApi.putCourse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteCourse(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseApiGetCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourse(requestParameters: CourseApiGetCourseRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CourseResponse> {
            return localVarFp.getCourse(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CourseApiPutCourseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCourse(requestParameters: CourseApiPutCourseRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseResponse> {
            return localVarFp.putCourse(requestParameters.courseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCourse operation in CourseApi.
 * @export
 * @interface CourseApiGetCourseRequest
 */
export interface CourseApiGetCourseRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof CourseApiGetCourse
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof CourseApiGetCourse
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof CourseApiGetCourse
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof CourseApiGetCourse
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof CourseApiGetCourse
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof CourseApiGetCourse
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof CourseApiGetCourse
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof CourseApiGetCourse
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof CourseApiGetCourse
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof CourseApiGetCourse
     */
    readonly locale?: string
}

/**
 * Request parameters for putCourse operation in CourseApi.
 * @export
 * @interface CourseApiPutCourseRequest
 */
export interface CourseApiPutCourseRequest {
    /**
     * 
     * @type {CourseRequest}
     * @memberof CourseApiPutCourse
     */
    readonly courseRequest: CourseRequest
}

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public deleteCourse(options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).deleteCourse(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseApiGetCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public getCourse(requestParameters: CourseApiGetCourseRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).getCourse(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CourseApiPutCourseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseApi
     */
    public putCourse(requestParameters: CourseApiPutCourseRequest, options?: RawAxiosRequestConfig) {
        return CourseApiFp(this.configuration).putCourse(requestParameters.courseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormationApi - axios parameter creator
 * @export
 */
export const FormationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormationsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFormationsId', 'id', id)
            const localVarPath = `/formations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormations: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/formations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormationsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFormationsId', 'id', id)
            const localVarPath = `/formations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormationRequest} formationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFormations: async (formationRequest: FormationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formationRequest' is not null or undefined
            assertParamExists('postFormations', 'formationRequest', formationRequest)
            const localVarPath = `/formations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {FormationRequest} formationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFormationsId: async (id: number, formationRequest: FormationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putFormationsId', 'id', id)
            // verify required parameter 'formationRequest' is not null or undefined
            assertParamExists('putFormationsId', 'formationRequest', formationRequest)
            const localVarPath = `/formations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormationApi - functional programming interface
 * @export
 */
export const FormationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFormationsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFormationsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationApi.deleteFormationsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormations(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormations(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationApi.getFormations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormationsId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormationsId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationApi.getFormationsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormationRequest} formationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFormations(formationRequest: FormationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFormations(formationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationApi.postFormations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {FormationRequest} formationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFormationsId(id: number, formationRequest: FormationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFormationsId(id, formationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationApi.putFormationsId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormationApi - factory interface
 * @export
 */
export const FormationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormationApiFp(configuration)
    return {
        /**
         * 
         * @param {FormationApiDeleteFormationsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormationsId(requestParameters: FormationApiDeleteFormationsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteFormationsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormationApiGetFormationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormations(requestParameters: FormationApiGetFormationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FormationListResponse> {
            return localVarFp.getFormations(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormationApiGetFormationsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormationsId(requestParameters: FormationApiGetFormationsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<FormationResponse> {
            return localVarFp.getFormationsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormationApiPostFormationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFormations(requestParameters: FormationApiPostFormationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FormationResponse> {
            return localVarFp.postFormations(requestParameters.formationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormationApiPutFormationsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFormationsId(requestParameters: FormationApiPutFormationsIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<FormationResponse> {
            return localVarFp.putFormationsId(requestParameters.id, requestParameters.formationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteFormationsId operation in FormationApi.
 * @export
 * @interface FormationApiDeleteFormationsIdRequest
 */
export interface FormationApiDeleteFormationsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FormationApiDeleteFormationsId
     */
    readonly id: number
}

/**
 * Request parameters for getFormations operation in FormationApi.
 * @export
 * @interface FormationApiGetFormationsRequest
 */
export interface FormationApiGetFormationsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof FormationApiGetFormations
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof FormationApiGetFormations
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof FormationApiGetFormations
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof FormationApiGetFormations
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof FormationApiGetFormations
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof FormationApiGetFormations
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof FormationApiGetFormations
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof FormationApiGetFormations
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof FormationApiGetFormations
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof FormationApiGetFormations
     */
    readonly locale?: string
}

/**
 * Request parameters for getFormationsId operation in FormationApi.
 * @export
 * @interface FormationApiGetFormationsIdRequest
 */
export interface FormationApiGetFormationsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FormationApiGetFormationsId
     */
    readonly id: number
}

/**
 * Request parameters for postFormations operation in FormationApi.
 * @export
 * @interface FormationApiPostFormationsRequest
 */
export interface FormationApiPostFormationsRequest {
    /**
     * 
     * @type {FormationRequest}
     * @memberof FormationApiPostFormations
     */
    readonly formationRequest: FormationRequest
}

/**
 * Request parameters for putFormationsId operation in FormationApi.
 * @export
 * @interface FormationApiPutFormationsIdRequest
 */
export interface FormationApiPutFormationsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FormationApiPutFormationsId
     */
    readonly id: number

    /**
     * 
     * @type {FormationRequest}
     * @memberof FormationApiPutFormationsId
     */
    readonly formationRequest: FormationRequest
}

/**
 * FormationApi - object-oriented interface
 * @export
 * @class FormationApi
 * @extends {BaseAPI}
 */
export class FormationApi extends BaseAPI {
    /**
     * 
     * @param {FormationApiDeleteFormationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationApi
     */
    public deleteFormationsId(requestParameters: FormationApiDeleteFormationsIdRequest, options?: RawAxiosRequestConfig) {
        return FormationApiFp(this.configuration).deleteFormationsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormationApiGetFormationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationApi
     */
    public getFormations(requestParameters: FormationApiGetFormationsRequest = {}, options?: RawAxiosRequestConfig) {
        return FormationApiFp(this.configuration).getFormations(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormationApiGetFormationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationApi
     */
    public getFormationsId(requestParameters: FormationApiGetFormationsIdRequest, options?: RawAxiosRequestConfig) {
        return FormationApiFp(this.configuration).getFormationsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormationApiPostFormationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationApi
     */
    public postFormations(requestParameters: FormationApiPostFormationsRequest, options?: RawAxiosRequestConfig) {
        return FormationApiFp(this.configuration).postFormations(requestParameters.formationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormationApiPutFormationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationApi
     */
    public putFormationsId(requestParameters: FormationApiPutFormationsIdRequest, options?: RawAxiosRequestConfig) {
        return FormationApiFp(this.configuration).putFormationsId(requestParameters.id, requestParameters.formationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FormationSettingApi - axios parameter creator
 * @export
 */
export const FormationSettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormationSetting: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/formation-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormationSetting: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/formation-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FormationSettingRequest} formationSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFormationSetting: async (formationSettingRequest: FormationSettingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'formationSettingRequest' is not null or undefined
            assertParamExists('putFormationSetting', 'formationSettingRequest', formationSettingRequest)
            const localVarPath = `/formation-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(formationSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormationSettingApi - functional programming interface
 * @export
 */
export const FormationSettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FormationSettingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFormationSetting(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFormationSetting(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationSettingApi.deleteFormationSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFormationSetting(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFormationSetting(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationSettingApi.getFormationSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FormationSettingRequest} formationSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFormationSetting(formationSettingRequest: FormationSettingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormationSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFormationSetting(formationSettingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FormationSettingApi.putFormationSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FormationSettingApi - factory interface
 * @export
 */
export const FormationSettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FormationSettingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFormationSetting(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteFormationSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormationSettingApiGetFormationSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFormationSetting(requestParameters: FormationSettingApiGetFormationSettingRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FormationSettingResponse> {
            return localVarFp.getFormationSetting(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FormationSettingApiPutFormationSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFormationSetting(requestParameters: FormationSettingApiPutFormationSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<FormationSettingResponse> {
            return localVarFp.putFormationSetting(requestParameters.formationSettingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFormationSetting operation in FormationSettingApi.
 * @export
 * @interface FormationSettingApiGetFormationSettingRequest
 */
export interface FormationSettingApiGetFormationSettingRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof FormationSettingApiGetFormationSetting
     */
    readonly locale?: string
}

/**
 * Request parameters for putFormationSetting operation in FormationSettingApi.
 * @export
 * @interface FormationSettingApiPutFormationSettingRequest
 */
export interface FormationSettingApiPutFormationSettingRequest {
    /**
     * 
     * @type {FormationSettingRequest}
     * @memberof FormationSettingApiPutFormationSetting
     */
    readonly formationSettingRequest: FormationSettingRequest
}

/**
 * FormationSettingApi - object-oriented interface
 * @export
 * @class FormationSettingApi
 * @extends {BaseAPI}
 */
export class FormationSettingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationSettingApi
     */
    public deleteFormationSetting(options?: RawAxiosRequestConfig) {
        return FormationSettingApiFp(this.configuration).deleteFormationSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormationSettingApiGetFormationSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationSettingApi
     */
    public getFormationSetting(requestParameters: FormationSettingApiGetFormationSettingRequest = {}, options?: RawAxiosRequestConfig) {
        return FormationSettingApiFp(this.configuration).getFormationSetting(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FormationSettingApiPutFormationSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormationSettingApi
     */
    public putFormationSetting(requestParameters: FormationSettingApiPutFormationSettingRequest, options?: RawAxiosRequestConfig) {
        return FormationSettingApiFp(this.configuration).putFormationSetting(requestParameters.formationSettingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HomePageApi - axios parameter creator
 * @export
 */
export const HomePageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomePage: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePage: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HomePageRequest} homePageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomePage: async (homePageRequest: HomePageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homePageRequest' is not null or undefined
            assertParamExists('putHomePage', 'homePageRequest', homePageRequest)
            const localVarPath = `/home-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homePageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomePageApi - functional programming interface
 * @export
 */
export const HomePageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomePageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHomePage(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHomePage(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomePageApi.deleteHomePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomePage(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomePage(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomePageApi.getHomePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {HomePageRequest} homePageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putHomePage(homePageRequest: HomePageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putHomePage(homePageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomePageApi.putHomePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomePageApi - factory interface
 * @export
 */
export const HomePageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomePageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomePage(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteHomePage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomePageApiGetHomePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePage(requestParameters: HomePageApiGetHomePageRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<HomePageResponse> {
            return localVarFp.getHomePage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomePageApiPutHomePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomePage(requestParameters: HomePageApiPutHomePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<HomePageResponse> {
            return localVarFp.putHomePage(requestParameters.homePageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHomePage operation in HomePageApi.
 * @export
 * @interface HomePageApiGetHomePageRequest
 */
export interface HomePageApiGetHomePageRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof HomePageApiGetHomePage
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly locale?: string
}

/**
 * Request parameters for putHomePage operation in HomePageApi.
 * @export
 * @interface HomePageApiPutHomePageRequest
 */
export interface HomePageApiPutHomePageRequest {
    /**
     * 
     * @type {HomePageRequest}
     * @memberof HomePageApiPutHomePage
     */
    readonly homePageRequest: HomePageRequest
}

/**
 * HomePageApi - object-oriented interface
 * @export
 * @class HomePageApi
 * @extends {BaseAPI}
 */
export class HomePageApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public deleteHomePage(options?: RawAxiosRequestConfig) {
        return HomePageApiFp(this.configuration).deleteHomePage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageApiGetHomePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public getHomePage(requestParameters: HomePageApiGetHomePageRequest = {}, options?: RawAxiosRequestConfig) {
        return HomePageApiFp(this.configuration).getHomePage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageApiPutHomePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public putHomePage(requestParameters: HomePageApiPutHomePageRequest, options?: RawAxiosRequestConfig) {
        return HomePageApiFp(this.configuration).putHomePage(requestParameters.homePageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HomeSettingApi - axios parameter creator
 * @export
 */
export const HomeSettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomeSetting: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeSetting: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HomeSettingRequest} homeSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomeSetting: async (homeSettingRequest: HomeSettingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeSettingRequest' is not null or undefined
            assertParamExists('putHomeSetting', 'homeSettingRequest', homeSettingRequest)
            const localVarPath = `/home-setting`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homeSettingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomeSettingApi - functional programming interface
 * @export
 */
export const HomeSettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomeSettingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHomeSetting(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHomeSetting(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeSettingApi.deleteHomeSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeSetting(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomeSetting(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeSettingApi.getHomeSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {HomeSettingRequest} homeSettingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putHomeSetting(homeSettingRequest: HomeSettingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomeSettingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putHomeSetting(homeSettingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HomeSettingApi.putHomeSetting']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HomeSettingApi - factory interface
 * @export
 */
export const HomeSettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomeSettingApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomeSetting(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteHomeSetting(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomeSettingApiGetHomeSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeSetting(requestParameters: HomeSettingApiGetHomeSettingRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<HomeSettingResponse> {
            return localVarFp.getHomeSetting(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomeSettingApiPutHomeSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomeSetting(requestParameters: HomeSettingApiPutHomeSettingRequest, options?: RawAxiosRequestConfig): AxiosPromise<HomeSettingResponse> {
            return localVarFp.putHomeSetting(requestParameters.homeSettingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHomeSetting operation in HomeSettingApi.
 * @export
 * @interface HomeSettingApiGetHomeSettingRequest
 */
export interface HomeSettingApiGetHomeSettingRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof HomeSettingApiGetHomeSetting
     */
    readonly locale?: string
}

/**
 * Request parameters for putHomeSetting operation in HomeSettingApi.
 * @export
 * @interface HomeSettingApiPutHomeSettingRequest
 */
export interface HomeSettingApiPutHomeSettingRequest {
    /**
     * 
     * @type {HomeSettingRequest}
     * @memberof HomeSettingApiPutHomeSetting
     */
    readonly homeSettingRequest: HomeSettingRequest
}

/**
 * HomeSettingApi - object-oriented interface
 * @export
 * @class HomeSettingApi
 * @extends {BaseAPI}
 */
export class HomeSettingApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeSettingApi
     */
    public deleteHomeSetting(options?: RawAxiosRequestConfig) {
        return HomeSettingApiFp(this.configuration).deleteHomeSetting(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomeSettingApiGetHomeSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeSettingApi
     */
    public getHomeSetting(requestParameters: HomeSettingApiGetHomeSettingRequest = {}, options?: RawAxiosRequestConfig) {
        return HomeSettingApiFp(this.configuration).getHomeSetting(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomeSettingApiPutHomeSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomeSettingApi
     */
    public putHomeSetting(requestParameters: HomeSettingApiPutHomeSettingRequest, options?: RawAxiosRequestConfig) {
        return HomeSettingApiFp(this.configuration).putHomeSetting(requestParameters.homeSettingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LegalMentionApi - axios parameter creator
 * @export
 */
export const LegalMentionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLegalMention: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal-mention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLegalMention: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal-mention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LegalMentionRequest} legalMentionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLegalMention: async (legalMentionRequest: LegalMentionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'legalMentionRequest' is not null or undefined
            assertParamExists('putLegalMention', 'legalMentionRequest', legalMentionRequest)
            const localVarPath = `/legal-mention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(legalMentionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalMentionApi - functional programming interface
 * @export
 */
export const LegalMentionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegalMentionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLegalMention(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLegalMention(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalMentionApi.deleteLegalMention']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLegalMention(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalMentionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLegalMention(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalMentionApi.getLegalMention']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LegalMentionRequest} legalMentionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLegalMention(legalMentionRequest: LegalMentionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalMentionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putLegalMention(legalMentionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalMentionApi.putLegalMention']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LegalMentionApi - factory interface
 * @export
 */
export const LegalMentionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegalMentionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLegalMention(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteLegalMention(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LegalMentionApiGetLegalMentionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLegalMention(requestParameters: LegalMentionApiGetLegalMentionRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<LegalMentionResponse> {
            return localVarFp.getLegalMention(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LegalMentionApiPutLegalMentionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLegalMention(requestParameters: LegalMentionApiPutLegalMentionRequest, options?: RawAxiosRequestConfig): AxiosPromise<LegalMentionResponse> {
            return localVarFp.putLegalMention(requestParameters.legalMentionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getLegalMention operation in LegalMentionApi.
 * @export
 * @interface LegalMentionApiGetLegalMentionRequest
 */
export interface LegalMentionApiGetLegalMentionRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof LegalMentionApiGetLegalMention
     */
    readonly locale?: string
}

/**
 * Request parameters for putLegalMention operation in LegalMentionApi.
 * @export
 * @interface LegalMentionApiPutLegalMentionRequest
 */
export interface LegalMentionApiPutLegalMentionRequest {
    /**
     * 
     * @type {LegalMentionRequest}
     * @memberof LegalMentionApiPutLegalMention
     */
    readonly legalMentionRequest: LegalMentionRequest
}

/**
 * LegalMentionApi - object-oriented interface
 * @export
 * @class LegalMentionApi
 * @extends {BaseAPI}
 */
export class LegalMentionApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalMentionApi
     */
    public deleteLegalMention(options?: RawAxiosRequestConfig) {
        return LegalMentionApiFp(this.configuration).deleteLegalMention(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LegalMentionApiGetLegalMentionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalMentionApi
     */
    public getLegalMention(requestParameters: LegalMentionApiGetLegalMentionRequest = {}, options?: RawAxiosRequestConfig) {
        return LegalMentionApiFp(this.configuration).getLegalMention(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LegalMentionApiPutLegalMentionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalMentionApi
     */
    public putLegalMention(requestParameters: LegalMentionApiPutLegalMentionRequest, options?: RawAxiosRequestConfig) {
        return LegalMentionApiFp(this.configuration).putLegalMention(requestParameters.legalMentionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PartnerApi - axios parameter creator
 * @export
 */
export const PartnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePartnersId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePartnersId', 'id', id)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartners: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnersId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPartnersId', 'id', id)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPartners: async (partnerRequest: PartnerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerRequest' is not null or undefined
            assertParamExists('postPartners', 'partnerRequest', partnerRequest)
            const localVarPath = `/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPartnersId: async (id: number, partnerRequest: PartnerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPartnersId', 'id', id)
            // verify required parameter 'partnerRequest' is not null or undefined
            assertParamExists('putPartnersId', 'partnerRequest', partnerRequest)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerApi - functional programming interface
 * @export
 */
export const PartnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePartnersId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePartnersId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnerApi.deletePartnersId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartners(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartners(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnerApi.getPartners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartnersId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartnersId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnerApi.getPartnersId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPartners(partnerRequest: PartnerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPartners(partnerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnerApi.postPartners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPartnersId(id: number, partnerRequest: PartnerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPartnersId(id, partnerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnerApi.putPartnersId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PartnerApi - factory interface
 * @export
 */
export const PartnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnerApiFp(configuration)
    return {
        /**
         * 
         * @param {PartnerApiDeletePartnersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePartnersId(requestParameters: PartnerApiDeletePartnersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePartnersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiGetPartnersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartners(requestParameters: PartnerApiGetPartnersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PartnerListResponse> {
            return localVarFp.getPartners(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiGetPartnersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnersId(requestParameters: PartnerApiGetPartnersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PartnerResponse> {
            return localVarFp.getPartnersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiPostPartnersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPartners(requestParameters: PartnerApiPostPartnersRequest, options?: RawAxiosRequestConfig): AxiosPromise<PartnerResponse> {
            return localVarFp.postPartners(requestParameters.partnerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiPutPartnersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPartnersId(requestParameters: PartnerApiPutPartnersIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<PartnerResponse> {
            return localVarFp.putPartnersId(requestParameters.id, requestParameters.partnerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePartnersId operation in PartnerApi.
 * @export
 * @interface PartnerApiDeletePartnersIdRequest
 */
export interface PartnerApiDeletePartnersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnerApiDeletePartnersId
     */
    readonly id: number
}

/**
 * Request parameters for getPartners operation in PartnerApi.
 * @export
 * @interface PartnerApiGetPartnersRequest
 */
export interface PartnerApiGetPartnersRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof PartnerApiGetPartners
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly locale?: string
}

/**
 * Request parameters for getPartnersId operation in PartnerApi.
 * @export
 * @interface PartnerApiGetPartnersIdRequest
 */
export interface PartnerApiGetPartnersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnerApiGetPartnersId
     */
    readonly id: number
}

/**
 * Request parameters for postPartners operation in PartnerApi.
 * @export
 * @interface PartnerApiPostPartnersRequest
 */
export interface PartnerApiPostPartnersRequest {
    /**
     * 
     * @type {PartnerRequest}
     * @memberof PartnerApiPostPartners
     */
    readonly partnerRequest: PartnerRequest
}

/**
 * Request parameters for putPartnersId operation in PartnerApi.
 * @export
 * @interface PartnerApiPutPartnersIdRequest
 */
export interface PartnerApiPutPartnersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnerApiPutPartnersId
     */
    readonly id: number

    /**
     * 
     * @type {PartnerRequest}
     * @memberof PartnerApiPutPartnersId
     */
    readonly partnerRequest: PartnerRequest
}

/**
 * PartnerApi - object-oriented interface
 * @export
 * @class PartnerApi
 * @extends {BaseAPI}
 */
export class PartnerApi extends BaseAPI {
    /**
     * 
     * @param {PartnerApiDeletePartnersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public deletePartnersId(requestParameters: PartnerApiDeletePartnersIdRequest, options?: RawAxiosRequestConfig) {
        return PartnerApiFp(this.configuration).deletePartnersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiGetPartnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public getPartners(requestParameters: PartnerApiGetPartnersRequest = {}, options?: RawAxiosRequestConfig) {
        return PartnerApiFp(this.configuration).getPartners(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiGetPartnersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public getPartnersId(requestParameters: PartnerApiGetPartnersIdRequest, options?: RawAxiosRequestConfig) {
        return PartnerApiFp(this.configuration).getPartnersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiPostPartnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public postPartners(requestParameters: PartnerApiPostPartnersRequest, options?: RawAxiosRequestConfig) {
        return PartnerApiFp(this.configuration).postPartners(requestParameters.partnerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiPutPartnersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public putPartnersId(requestParameters: PartnerApiPutPartnersIdRequest, options?: RawAxiosRequestConfig) {
        return PartnerApiFp(this.configuration).putPartnersId(requestParameters.id, requestParameters.partnerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PilotProjectApi - axios parameter creator
 * @export
 */
export const PilotProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePilotProject: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pilot-project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPilotProject: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pilot-project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PilotProjectRequest} pilotProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPilotProject: async (pilotProjectRequest: PilotProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pilotProjectRequest' is not null or undefined
            assertParamExists('putPilotProject', 'pilotProjectRequest', pilotProjectRequest)
            const localVarPath = `/pilot-project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pilotProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PilotProjectApi - functional programming interface
 * @export
 */
export const PilotProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PilotProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePilotProject(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePilotProject(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PilotProjectApi.deletePilotProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPilotProject(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PilotProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPilotProject(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PilotProjectApi.getPilotProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PilotProjectRequest} pilotProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPilotProject(pilotProjectRequest: PilotProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PilotProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPilotProject(pilotProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PilotProjectApi.putPilotProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PilotProjectApi - factory interface
 * @export
 */
export const PilotProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PilotProjectApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePilotProject(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePilotProject(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PilotProjectApiGetPilotProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPilotProject(requestParameters: PilotProjectApiGetPilotProjectRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PilotProjectResponse> {
            return localVarFp.getPilotProject(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PilotProjectApiPutPilotProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPilotProject(requestParameters: PilotProjectApiPutPilotProjectRequest, options?: RawAxiosRequestConfig): AxiosPromise<PilotProjectResponse> {
            return localVarFp.putPilotProject(requestParameters.pilotProjectRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPilotProject operation in PilotProjectApi.
 * @export
 * @interface PilotProjectApiGetPilotProjectRequest
 */
export interface PilotProjectApiGetPilotProjectRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof PilotProjectApiGetPilotProject
     */
    readonly locale?: string
}

/**
 * Request parameters for putPilotProject operation in PilotProjectApi.
 * @export
 * @interface PilotProjectApiPutPilotProjectRequest
 */
export interface PilotProjectApiPutPilotProjectRequest {
    /**
     * 
     * @type {PilotProjectRequest}
     * @memberof PilotProjectApiPutPilotProject
     */
    readonly pilotProjectRequest: PilotProjectRequest
}

/**
 * PilotProjectApi - object-oriented interface
 * @export
 * @class PilotProjectApi
 * @extends {BaseAPI}
 */
export class PilotProjectApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PilotProjectApi
     */
    public deletePilotProject(options?: RawAxiosRequestConfig) {
        return PilotProjectApiFp(this.configuration).deletePilotProject(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PilotProjectApiGetPilotProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PilotProjectApi
     */
    public getPilotProject(requestParameters: PilotProjectApiGetPilotProjectRequest = {}, options?: RawAxiosRequestConfig) {
        return PilotProjectApiFp(this.configuration).getPilotProject(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PilotProjectApiPutPilotProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PilotProjectApi
     */
    public putPilotProject(requestParameters: PilotProjectApiPutPilotProjectRequest, options?: RawAxiosRequestConfig) {
        return PilotProjectApiFp(this.configuration).putPilotProject(requestParameters.pilotProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PrivacyPolicyApi - axios parameter creator
 * @export
 */
export const PrivacyPolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivacyPolicy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/privacy-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivacyPolicy: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/privacy-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PrivacyPolicyRequest} privacyPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPrivacyPolicy: async (privacyPolicyRequest: PrivacyPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'privacyPolicyRequest' is not null or undefined
            assertParamExists('putPrivacyPolicy', 'privacyPolicyRequest', privacyPolicyRequest)
            const localVarPath = `/privacy-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(privacyPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivacyPolicyApi - functional programming interface
 * @export
 */
export const PrivacyPolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrivacyPolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrivacyPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrivacyPolicy(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrivacyPolicyApi.deletePrivacyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivacyPolicy(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivacyPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivacyPolicy(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrivacyPolicyApi.getPrivacyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PrivacyPolicyRequest} privacyPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPrivacyPolicy(privacyPolicyRequest: PrivacyPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivacyPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPrivacyPolicy(privacyPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PrivacyPolicyApi.putPrivacyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PrivacyPolicyApi - factory interface
 * @export
 */
export const PrivacyPolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrivacyPolicyApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivacyPolicy(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePrivacyPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PrivacyPolicyApiGetPrivacyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivacyPolicy(requestParameters: PrivacyPolicyApiGetPrivacyPolicyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PrivacyPolicyResponse> {
            return localVarFp.getPrivacyPolicy(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PrivacyPolicyApiPutPrivacyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPrivacyPolicy(requestParameters: PrivacyPolicyApiPutPrivacyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<PrivacyPolicyResponse> {
            return localVarFp.putPrivacyPolicy(requestParameters.privacyPolicyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPrivacyPolicy operation in PrivacyPolicyApi.
 * @export
 * @interface PrivacyPolicyApiGetPrivacyPolicyRequest
 */
export interface PrivacyPolicyApiGetPrivacyPolicyRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof PrivacyPolicyApiGetPrivacyPolicy
     */
    readonly locale?: string
}

/**
 * Request parameters for putPrivacyPolicy operation in PrivacyPolicyApi.
 * @export
 * @interface PrivacyPolicyApiPutPrivacyPolicyRequest
 */
export interface PrivacyPolicyApiPutPrivacyPolicyRequest {
    /**
     * 
     * @type {PrivacyPolicyRequest}
     * @memberof PrivacyPolicyApiPutPrivacyPolicy
     */
    readonly privacyPolicyRequest: PrivacyPolicyRequest
}

/**
 * PrivacyPolicyApi - object-oriented interface
 * @export
 * @class PrivacyPolicyApi
 * @extends {BaseAPI}
 */
export class PrivacyPolicyApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivacyPolicyApi
     */
    public deletePrivacyPolicy(options?: RawAxiosRequestConfig) {
        return PrivacyPolicyApiFp(this.configuration).deletePrivacyPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivacyPolicyApiGetPrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivacyPolicyApi
     */
    public getPrivacyPolicy(requestParameters: PrivacyPolicyApiGetPrivacyPolicyRequest = {}, options?: RawAxiosRequestConfig) {
        return PrivacyPolicyApiFp(this.configuration).getPrivacyPolicy(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivacyPolicyApiPutPrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivacyPolicyApi
     */
    public putPrivacyPolicy(requestParameters: PrivacyPolicyApiPutPrivacyPolicyRequest, options?: RawAxiosRequestConfig) {
        return PrivacyPolicyApiFp(this.configuration).putPrivacyPolicy(requestParameters.privacyPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QualiopiCertificateApi - axios parameter creator
 * @export
 */
export const QualiopiCertificateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQualiopiCertificate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualiopi-certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQualiopiCertificate: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualiopi-certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QualiopiCertificateRequest} qualiopiCertificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putQualiopiCertificate: async (qualiopiCertificateRequest: QualiopiCertificateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualiopiCertificateRequest' is not null or undefined
            assertParamExists('putQualiopiCertificate', 'qualiopiCertificateRequest', qualiopiCertificateRequest)
            const localVarPath = `/qualiopi-certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(qualiopiCertificateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QualiopiCertificateApi - functional programming interface
 * @export
 */
export const QualiopiCertificateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QualiopiCertificateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQualiopiCertificate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQualiopiCertificate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualiopiCertificateApi.deleteQualiopiCertificate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQualiopiCertificate(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualiopiCertificateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQualiopiCertificate(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualiopiCertificateApi.getQualiopiCertificate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QualiopiCertificateRequest} qualiopiCertificateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putQualiopiCertificate(qualiopiCertificateRequest: QualiopiCertificateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualiopiCertificateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putQualiopiCertificate(qualiopiCertificateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QualiopiCertificateApi.putQualiopiCertificate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QualiopiCertificateApi - factory interface
 * @export
 */
export const QualiopiCertificateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QualiopiCertificateApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQualiopiCertificate(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteQualiopiCertificate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QualiopiCertificateApiGetQualiopiCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQualiopiCertificate(requestParameters: QualiopiCertificateApiGetQualiopiCertificateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<QualiopiCertificateResponse> {
            return localVarFp.getQualiopiCertificate(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QualiopiCertificateApiPutQualiopiCertificateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putQualiopiCertificate(requestParameters: QualiopiCertificateApiPutQualiopiCertificateRequest, options?: RawAxiosRequestConfig): AxiosPromise<QualiopiCertificateResponse> {
            return localVarFp.putQualiopiCertificate(requestParameters.qualiopiCertificateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getQualiopiCertificate operation in QualiopiCertificateApi.
 * @export
 * @interface QualiopiCertificateApiGetQualiopiCertificateRequest
 */
export interface QualiopiCertificateApiGetQualiopiCertificateRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof QualiopiCertificateApiGetQualiopiCertificate
     */
    readonly locale?: string
}

/**
 * Request parameters for putQualiopiCertificate operation in QualiopiCertificateApi.
 * @export
 * @interface QualiopiCertificateApiPutQualiopiCertificateRequest
 */
export interface QualiopiCertificateApiPutQualiopiCertificateRequest {
    /**
     * 
     * @type {QualiopiCertificateRequest}
     * @memberof QualiopiCertificateApiPutQualiopiCertificate
     */
    readonly qualiopiCertificateRequest: QualiopiCertificateRequest
}

/**
 * QualiopiCertificateApi - object-oriented interface
 * @export
 * @class QualiopiCertificateApi
 * @extends {BaseAPI}
 */
export class QualiopiCertificateApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualiopiCertificateApi
     */
    public deleteQualiopiCertificate(options?: RawAxiosRequestConfig) {
        return QualiopiCertificateApiFp(this.configuration).deleteQualiopiCertificate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QualiopiCertificateApiGetQualiopiCertificateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualiopiCertificateApi
     */
    public getQualiopiCertificate(requestParameters: QualiopiCertificateApiGetQualiopiCertificateRequest = {}, options?: RawAxiosRequestConfig) {
        return QualiopiCertificateApiFp(this.configuration).getQualiopiCertificate(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QualiopiCertificateApiPutQualiopiCertificateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualiopiCertificateApi
     */
    public putQualiopiCertificate(requestParameters: QualiopiCertificateApiPutQualiopiCertificateRequest, options?: RawAxiosRequestConfig) {
        return QualiopiCertificateApiFp(this.configuration).putQualiopiCertificate(requestParameters.qualiopiCertificateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowcaseWebsiteApi - axios parameter creator
 * @export
 */
export const ShowcaseWebsiteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShowcaseWebsite: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showcase-website`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowcaseWebsite: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/showcase-website`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShowcaseWebsiteRequest} showcaseWebsiteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShowcaseWebsite: async (showcaseWebsiteRequest: ShowcaseWebsiteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showcaseWebsiteRequest' is not null or undefined
            assertParamExists('putShowcaseWebsite', 'showcaseWebsiteRequest', showcaseWebsiteRequest)
            const localVarPath = `/showcase-website`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(showcaseWebsiteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowcaseWebsiteApi - functional programming interface
 * @export
 */
export const ShowcaseWebsiteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowcaseWebsiteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShowcaseWebsite(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShowcaseWebsite(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShowcaseWebsiteApi.deleteShowcaseWebsite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShowcaseWebsite(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowcaseWebsiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShowcaseWebsite(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShowcaseWebsiteApi.getShowcaseWebsite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ShowcaseWebsiteRequest} showcaseWebsiteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShowcaseWebsite(showcaseWebsiteRequest: ShowcaseWebsiteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowcaseWebsiteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShowcaseWebsite(showcaseWebsiteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShowcaseWebsiteApi.putShowcaseWebsite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShowcaseWebsiteApi - factory interface
 * @export
 */
export const ShowcaseWebsiteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowcaseWebsiteApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShowcaseWebsite(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteShowcaseWebsite(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShowcaseWebsiteApiGetShowcaseWebsiteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShowcaseWebsite(requestParameters: ShowcaseWebsiteApiGetShowcaseWebsiteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ShowcaseWebsiteResponse> {
            return localVarFp.getShowcaseWebsite(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ShowcaseWebsiteApiPutShowcaseWebsiteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShowcaseWebsite(requestParameters: ShowcaseWebsiteApiPutShowcaseWebsiteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShowcaseWebsiteResponse> {
            return localVarFp.putShowcaseWebsite(requestParameters.showcaseWebsiteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getShowcaseWebsite operation in ShowcaseWebsiteApi.
 * @export
 * @interface ShowcaseWebsiteApiGetShowcaseWebsiteRequest
 */
export interface ShowcaseWebsiteApiGetShowcaseWebsiteRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof ShowcaseWebsiteApiGetShowcaseWebsite
     */
    readonly locale?: string
}

/**
 * Request parameters for putShowcaseWebsite operation in ShowcaseWebsiteApi.
 * @export
 * @interface ShowcaseWebsiteApiPutShowcaseWebsiteRequest
 */
export interface ShowcaseWebsiteApiPutShowcaseWebsiteRequest {
    /**
     * 
     * @type {ShowcaseWebsiteRequest}
     * @memberof ShowcaseWebsiteApiPutShowcaseWebsite
     */
    readonly showcaseWebsiteRequest: ShowcaseWebsiteRequest
}

/**
 * ShowcaseWebsiteApi - object-oriented interface
 * @export
 * @class ShowcaseWebsiteApi
 * @extends {BaseAPI}
 */
export class ShowcaseWebsiteApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcaseWebsiteApi
     */
    public deleteShowcaseWebsite(options?: RawAxiosRequestConfig) {
        return ShowcaseWebsiteApiFp(this.configuration).deleteShowcaseWebsite(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowcaseWebsiteApiGetShowcaseWebsiteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcaseWebsiteApi
     */
    public getShowcaseWebsite(requestParameters: ShowcaseWebsiteApiGetShowcaseWebsiteRequest = {}, options?: RawAxiosRequestConfig) {
        return ShowcaseWebsiteApiFp(this.configuration).getShowcaseWebsite(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowcaseWebsiteApiPutShowcaseWebsiteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowcaseWebsiteApi
     */
    public putShowcaseWebsite(requestParameters: ShowcaseWebsiteApiPutShowcaseWebsiteRequest, options?: RawAxiosRequestConfig) {
        return ShowcaseWebsiteApiFp(this.configuration).putShowcaseWebsite(requestParameters.showcaseWebsiteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TechnicalSupportApi - axios parameter creator
 * @export
 */
export const TechnicalSupportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTechnicalSupport: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/technical-support`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTechnicalSupport: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/technical-support`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TechnicalSupportRequest} technicalSupportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTechnicalSupport: async (technicalSupportRequest: TechnicalSupportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'technicalSupportRequest' is not null or undefined
            assertParamExists('putTechnicalSupport', 'technicalSupportRequest', technicalSupportRequest)
            const localVarPath = `/technical-support`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(technicalSupportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TechnicalSupportApi - functional programming interface
 * @export
 */
export const TechnicalSupportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TechnicalSupportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTechnicalSupport(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTechnicalSupport(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TechnicalSupportApi.deleteTechnicalSupport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTechnicalSupport(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TechnicalSupportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTechnicalSupport(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TechnicalSupportApi.getTechnicalSupport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TechnicalSupportRequest} technicalSupportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTechnicalSupport(technicalSupportRequest: TechnicalSupportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TechnicalSupportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTechnicalSupport(technicalSupportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TechnicalSupportApi.putTechnicalSupport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TechnicalSupportApi - factory interface
 * @export
 */
export const TechnicalSupportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TechnicalSupportApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTechnicalSupport(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTechnicalSupport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TechnicalSupportApiGetTechnicalSupportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTechnicalSupport(requestParameters: TechnicalSupportApiGetTechnicalSupportRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TechnicalSupportResponse> {
            return localVarFp.getTechnicalSupport(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TechnicalSupportApiPutTechnicalSupportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTechnicalSupport(requestParameters: TechnicalSupportApiPutTechnicalSupportRequest, options?: RawAxiosRequestConfig): AxiosPromise<TechnicalSupportResponse> {
            return localVarFp.putTechnicalSupport(requestParameters.technicalSupportRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTechnicalSupport operation in TechnicalSupportApi.
 * @export
 * @interface TechnicalSupportApiGetTechnicalSupportRequest
 */
export interface TechnicalSupportApiGetTechnicalSupportRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof TechnicalSupportApiGetTechnicalSupport
     */
    readonly locale?: string
}

/**
 * Request parameters for putTechnicalSupport operation in TechnicalSupportApi.
 * @export
 * @interface TechnicalSupportApiPutTechnicalSupportRequest
 */
export interface TechnicalSupportApiPutTechnicalSupportRequest {
    /**
     * 
     * @type {TechnicalSupportRequest}
     * @memberof TechnicalSupportApiPutTechnicalSupport
     */
    readonly technicalSupportRequest: TechnicalSupportRequest
}

/**
 * TechnicalSupportApi - object-oriented interface
 * @export
 * @class TechnicalSupportApi
 * @extends {BaseAPI}
 */
export class TechnicalSupportApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnicalSupportApi
     */
    public deleteTechnicalSupport(options?: RawAxiosRequestConfig) {
        return TechnicalSupportApiFp(this.configuration).deleteTechnicalSupport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TechnicalSupportApiGetTechnicalSupportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnicalSupportApi
     */
    public getTechnicalSupport(requestParameters: TechnicalSupportApiGetTechnicalSupportRequest = {}, options?: RawAxiosRequestConfig) {
        return TechnicalSupportApiFp(this.configuration).getTechnicalSupport(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TechnicalSupportApiPutTechnicalSupportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TechnicalSupportApi
     */
    public putTechnicalSupport(requestParameters: TechnicalSupportApiPutTechnicalSupportRequest, options?: RawAxiosRequestConfig) {
        return TechnicalSupportApiFp(this.configuration).putTechnicalSupport(requestParameters.technicalSupportRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestimonyApi - axios parameter creator
 * @export
 */
export const TestimonyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestimoniesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTestimoniesId', 'id', id)
            const localVarPath = `/testimonies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonies: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/testimonies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimoniesId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTestimoniesId', 'id', id)
            const localVarPath = `/testimonies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestimonyRequest} testimonyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonies: async (testimonyRequest: TestimonyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testimonyRequest' is not null or undefined
            assertParamExists('postTestimonies', 'testimonyRequest', testimonyRequest)
            const localVarPath = `/testimonies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonyRequest} testimonyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestimoniesId: async (id: number, testimonyRequest: TestimonyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTestimoniesId', 'id', id)
            // verify required parameter 'testimonyRequest' is not null or undefined
            assertParamExists('putTestimoniesId', 'testimonyRequest', testimonyRequest)
            const localVarPath = `/testimonies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestimonyApi - functional programming interface
 * @export
 */
export const TestimonyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestimonyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestimoniesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestimoniesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonyApi.deleteTestimoniesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestimonies(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestimonies(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonyApi.getTestimonies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestimoniesId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestimoniesId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonyApi.getTestimoniesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TestimonyRequest} testimonyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTestimonies(testimonyRequest: TestimonyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTestimonies(testimonyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonyApi.postTestimonies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonyRequest} testimonyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTestimoniesId(id: number, testimonyRequest: TestimonyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTestimoniesId(id, testimonyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestimonyApi.putTestimoniesId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestimonyApi - factory interface
 * @export
 */
export const TestimonyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestimonyApiFp(configuration)
    return {
        /**
         * 
         * @param {TestimonyApiDeleteTestimoniesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestimoniesId(requestParameters: TestimonyApiDeleteTestimoniesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTestimoniesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonyApiGetTestimoniesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonies(requestParameters: TestimonyApiGetTestimoniesRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TestimonyListResponse> {
            return localVarFp.getTestimonies(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonyApiGetTestimoniesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimoniesId(requestParameters: TestimonyApiGetTestimoniesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonyResponse> {
            return localVarFp.getTestimoniesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonyApiPostTestimoniesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonies(requestParameters: TestimonyApiPostTestimoniesRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonyResponse> {
            return localVarFp.postTestimonies(requestParameters.testimonyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonyApiPutTestimoniesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestimoniesId(requestParameters: TestimonyApiPutTestimoniesIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestimonyResponse> {
            return localVarFp.putTestimoniesId(requestParameters.id, requestParameters.testimonyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTestimoniesId operation in TestimonyApi.
 * @export
 * @interface TestimonyApiDeleteTestimoniesIdRequest
 */
export interface TestimonyApiDeleteTestimoniesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonyApiDeleteTestimoniesId
     */
    readonly id: number
}

/**
 * Request parameters for getTestimonies operation in TestimonyApi.
 * @export
 * @interface TestimonyApiGetTestimoniesRequest
 */
export interface TestimonyApiGetTestimoniesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof TestimonyApiGetTestimonies
     */
    readonly locale?: string
}

/**
 * Request parameters for getTestimoniesId operation in TestimonyApi.
 * @export
 * @interface TestimonyApiGetTestimoniesIdRequest
 */
export interface TestimonyApiGetTestimoniesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonyApiGetTestimoniesId
     */
    readonly id: number
}

/**
 * Request parameters for postTestimonies operation in TestimonyApi.
 * @export
 * @interface TestimonyApiPostTestimoniesRequest
 */
export interface TestimonyApiPostTestimoniesRequest {
    /**
     * 
     * @type {TestimonyRequest}
     * @memberof TestimonyApiPostTestimonies
     */
    readonly testimonyRequest: TestimonyRequest
}

/**
 * Request parameters for putTestimoniesId operation in TestimonyApi.
 * @export
 * @interface TestimonyApiPutTestimoniesIdRequest
 */
export interface TestimonyApiPutTestimoniesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonyApiPutTestimoniesId
     */
    readonly id: number

    /**
     * 
     * @type {TestimonyRequest}
     * @memberof TestimonyApiPutTestimoniesId
     */
    readonly testimonyRequest: TestimonyRequest
}

/**
 * TestimonyApi - object-oriented interface
 * @export
 * @class TestimonyApi
 * @extends {BaseAPI}
 */
export class TestimonyApi extends BaseAPI {
    /**
     * 
     * @param {TestimonyApiDeleteTestimoniesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonyApi
     */
    public deleteTestimoniesId(requestParameters: TestimonyApiDeleteTestimoniesIdRequest, options?: RawAxiosRequestConfig) {
        return TestimonyApiFp(this.configuration).deleteTestimoniesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonyApiGetTestimoniesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonyApi
     */
    public getTestimonies(requestParameters: TestimonyApiGetTestimoniesRequest = {}, options?: RawAxiosRequestConfig) {
        return TestimonyApiFp(this.configuration).getTestimonies(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonyApiGetTestimoniesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonyApi
     */
    public getTestimoniesId(requestParameters: TestimonyApiGetTestimoniesIdRequest, options?: RawAxiosRequestConfig) {
        return TestimonyApiFp(this.configuration).getTestimoniesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonyApiPostTestimoniesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonyApi
     */
    public postTestimonies(requestParameters: TestimonyApiPostTestimoniesRequest, options?: RawAxiosRequestConfig) {
        return TestimonyApiFp(this.configuration).postTestimonies(requestParameters.testimonyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonyApiPutTestimoniesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonyApi
     */
    public putTestimoniesId(requestParameters: TestimonyApiPutTestimoniesIdRequest, options?: RawAxiosRequestConfig) {
        return TestimonyApiFp(this.configuration).putTestimoniesId(requestParameters.id, requestParameters.testimonyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFilesIdDelete', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFilesIdGet', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload files
         * @summary 
         * @param {Array<File>} files 
         * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
         * @param {string} [refId] The ID of the entry which the file(s) will be linked to
         * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
         * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost: async (files: Array<File>, path?: string, refId?: string, ref?: string, field?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'files' is not null or undefined
            assertParamExists('uploadPost', 'files', files)
            const localVarPath = `/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (path !== undefined) { 
                localVarFormParams.append('path', path as any);
            }
    
            if (refId !== undefined) { 
                localVarFormParams.append('refId', refId as any);
            }
    
            if (ref !== undefined) { 
                localVarFormParams.append('ref', ref as any);
            }
    
            if (field !== undefined) { 
                localVarFormParams.append('field', field as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload file information
         * @summary 
         * @param {string} id File id
         * @param {UploadIdIdPostRequestFileInfo} [fileInfo] 
         * @param {File} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadididPost: async (id: string, fileInfo?: UploadIdIdPostRequestFileInfo, files?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadididPost', 'id', id)
            const localVarPath = `/upload?id={id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


            if (fileInfo !== undefined) { 
                localVarFormParams.append('fileInfo', new Blob([JSON.stringify(fileInfo)], { type: "application/json", }));
            }
    
            if (files !== undefined) { 
                localVarFormParams.append('files', files as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadFilesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFilesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadFilesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload files
         * @summary 
         * @param {Array<File>} files 
         * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
         * @param {string} [refId] The ID of the entry which the file(s) will be linked to
         * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
         * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPost(files: Array<File>, path?: string, refId?: string, ref?: string, field?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(files, path, refId, ref, field, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload file information
         * @summary 
         * @param {string} id File id
         * @param {UploadIdIdPostRequestFileInfo} [fileInfo] 
         * @param {File} [files] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadididPost(id: string, fileInfo?: UploadIdIdPostRequestFileInfo, files?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadididPost(id, fileInfo, files, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadFileApi.uploadididPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadFileApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadFilesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile> {
            return localVarFp.uploadFilesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile> {
            return localVarFp.uploadFilesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload files
         * @summary 
         * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadPost(requestParameters.files, requestParameters.path, requestParameters.refId, requestParameters.ref, requestParameters.field, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload file information
         * @summary 
         * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadididPost(requestParameters: UploadFileApiUploadididPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
            return localVarFp.uploadididPost(requestParameters.id, requestParameters.fileInfo, requestParameters.files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for uploadFilesIdDelete operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdDeleteRequest
 */
export interface UploadFileApiUploadFilesIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileApiUploadFilesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for uploadFilesIdGet operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdGetRequest
 */
export interface UploadFileApiUploadFilesIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadFileApiUploadFilesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for uploadPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadPostRequest
 */
export interface UploadFileApiUploadPostRequest {
    /**
     * 
     * @type {Array<File>}
     * @memberof UploadFileApiUploadPost
     */
    readonly files: Array<File>

    /**
     * The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly path?: string

    /**
     * The ID of the entry which the file(s) will be linked to
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly refId?: string

    /**
     * The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly ref?: string

    /**
     * The field of the entry which the file(s) will be precisely linked to.
     * @type {string}
     * @memberof UploadFileApiUploadPost
     */
    readonly field?: string
}

/**
 * Request parameters for uploadididPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadididPostRequest
 */
export interface UploadFileApiUploadididPostRequest {
    /**
     * File id
     * @type {string}
     * @memberof UploadFileApiUploadididPost
     */
    readonly id: string

    /**
     * 
     * @type {UploadIdIdPostRequestFileInfo}
     * @memberof UploadFileApiUploadididPost
     */
    readonly fileInfo?: UploadIdIdPostRequestFileInfo

    /**
     * 
     * @type {File}
     * @memberof UploadFileApiUploadididPost
     */
    readonly files?: File
}

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesGet(options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesIdDelete(requestParameters: UploadFileApiUploadFilesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadFilesIdGet(requestParameters: UploadFileApiUploadFilesIdGetRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadFilesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload files
     * @summary 
     * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadPost(requestParameters: UploadFileApiUploadPostRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadPost(requestParameters.files, requestParameters.path, requestParameters.refId, requestParameters.ref, requestParameters.field, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload file information
     * @summary 
     * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public uploadididPost(requestParameters: UploadFileApiUploadididPostRequest, options?: RawAxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).uploadididPost(requestParameters.id, requestParameters.fileInfo, requestParameters.files, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserTestApi - axios parameter creator
 * @export
 */
export const UserTestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserTest: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTest: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserTestRequest} userTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserTest: async (userTestRequest: UserTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userTestRequest' is not null or undefined
            assertParamExists('putUserTest', 'userTestRequest', userTestRequest)
            const localVarPath = `/user-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTestApi - functional programming interface
 * @export
 */
export const UserTestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserTest(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserTest(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTestApi.deleteUserTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTest(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTest(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTestApi.getUserTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserTestRequest} userTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserTest(userTestRequest: UserTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserTest(userTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTestApi.putUserTest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserTestApi - factory interface
 * @export
 */
export const UserTestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTestApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserTest(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteUserTest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTestApiGetUserTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTest(requestParameters: UserTestApiGetUserTestRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UserTestResponse> {
            return localVarFp.getUserTest(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserTestApiPutUserTestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserTest(requestParameters: UserTestApiPutUserTestRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserTestResponse> {
            return localVarFp.putUserTest(requestParameters.userTestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserTest operation in UserTestApi.
 * @export
 * @interface UserTestApiGetUserTestRequest
 */
export interface UserTestApiGetUserTestRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UserTestApiGetUserTest
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof UserTestApiGetUserTest
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UserTestApiGetUserTest
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UserTestApiGetUserTest
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UserTestApiGetUserTest
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UserTestApiGetUserTest
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UserTestApiGetUserTest
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UserTestApiGetUserTest
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof UserTestApiGetUserTest
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof UserTestApiGetUserTest
     */
    readonly locale?: string
}

/**
 * Request parameters for putUserTest operation in UserTestApi.
 * @export
 * @interface UserTestApiPutUserTestRequest
 */
export interface UserTestApiPutUserTestRequest {
    /**
     * 
     * @type {UserTestRequest}
     * @memberof UserTestApiPutUserTest
     */
    readonly userTestRequest: UserTestRequest
}

/**
 * UserTestApi - object-oriented interface
 * @export
 * @class UserTestApi
 * @extends {BaseAPI}
 */
export class UserTestApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTestApi
     */
    public deleteUserTest(options?: RawAxiosRequestConfig) {
        return UserTestApiFp(this.configuration).deleteUserTest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTestApiGetUserTestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTestApi
     */
    public getUserTest(requestParameters: UserTestApiGetUserTestRequest = {}, options?: RawAxiosRequestConfig) {
        return UserTestApiFp(this.configuration).getUserTest(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserTestApiPutUserTestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTestApi
     */
    public putUserTest(requestParameters: UserTestApiPutUserTestRequest, options?: RawAxiosRequestConfig) {
        return UserTestApiFp(this.configuration).putUserTest(requestParameters.userTestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost: async (authChangePasswordPostRequest: AuthChangePasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
            assertParamExists('authChangePasswordPost', 'authChangePasswordPostRequest', authChangePasswordPostRequest)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet: async (confirmation?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (confirmation !== undefined) {
                localVarQueryParameter['confirmation'] = confirmation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authForgotPasswordPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost: async (authLocalPostRequest: AuthLocalPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalPostRequest' is not null or undefined
            assertParamExists('authLocalPost', 'authLocalPostRequest', authLocalPostRequest)
            const localVarPath = `/auth/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost: async (authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
            assertParamExists('authLocalRegisterPost', 'authLocalRegisterPostRequest', authLocalRegisterPostRequest)
            const localVarPath = `/auth/local/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authProviderCallbackGet', 'provider', provider)
            const localVarPath = `/auth/{provider}/callback`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost: async (authResetPasswordPostRequest: AuthResetPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
            assertParamExists('authResetPasswordPost', 'authResetPasswordPostRequest', authResetPasswordPostRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authSendEmailConfirmationPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/send-email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet: async (provider: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('connectProviderGet', 'provider', provider)
            const localVarPath = `/connect/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordPost(authChangePasswordPostRequest: AuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordPost(authChangePasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authChangePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailConfirmationGet(confirmation?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailConfirmationGet(confirmation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authEmailConfirmationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgotPasswordPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authForgotPasswordPost(authForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authForgotPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalPost(authLocalPostRequest: AuthLocalPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(authLocalPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authLocalPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalRegisterPost(authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalRegisterPost(authLocalRegisterPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authLocalRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderCallbackGet(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderCallbackGet(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authProviderCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPasswordPost(authResetPasswordPostRequest: AuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPasswordPost(authResetPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendEmailConfirmationPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSendEmailConfirmationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendEmailConfirmationPost(authForgotPasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.authSendEmailConfirmationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectProviderGet(provider: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectProviderGet(provider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsAuthApi.connectProviderGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm user email
         * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send rest password email
         * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authProviderCallbackGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rest user password
         * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
            return localVarFp.authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.connectProviderGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authChangePasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthChangePasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthChangePasswordPostRequest {
    /**
     * 
     * @type {AuthChangePasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthChangePasswordPost
     */
    readonly authChangePasswordPostRequest: AuthChangePasswordPostRequest
}

/**
 * Request parameters for authEmailConfirmationGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest
 */
export interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest {
    /**
     * confirmation token received by email
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthEmailConfirmationGet
     */
    readonly confirmation?: string
}

/**
 * Request parameters for authForgotPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthForgotPasswordPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for authLocalPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalPostRequest {
    /**
     * 
     * @type {AuthLocalPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalPost
     */
    readonly authLocalPostRequest: AuthLocalPostRequest
}

/**
 * Request parameters for authLocalRegisterPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest {
    /**
     * 
     * @type {AuthLocalRegisterPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalRegisterPost
     */
    readonly authLocalRegisterPostRequest: AuthLocalRegisterPostRequest
}

/**
 * Request parameters for authProviderCallbackGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest
 */
export interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthProviderCallbackGet
     */
    readonly provider: string
}

/**
 * Request parameters for authResetPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthResetPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {AuthResetPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthResetPasswordPost
     */
    readonly authResetPasswordPostRequest: AuthResetPasswordPostRequest
}

/**
 * Request parameters for authSendEmailConfirmationPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest
 */
export interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthSendEmailConfirmationPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for connectProviderGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiConnectProviderGetRequest
 */
export interface UsersPermissionsAuthApiConnectProviderGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiConnectProviderGet
     */
    readonly provider: string
}

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI {
    /**
     * 
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authProviderCallbackGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public connectProviderGet(requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).connectProviderGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, usersPostRequest: UsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersIdPut', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersPermissionsRolesIdGet', 'id', id)
            const localVarPath = `/users-permissions/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost: async (usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesPost', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete: async (role: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRoleDelete', 'role', role)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut: async (role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'role', role)
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (usersPostRequest: UsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersPost', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsUsersRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCountGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, usersPostRequest: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, usersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsPermissionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsPermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesPost(usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRoleDelete(role: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(role, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesRoleDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRolePut(role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRolePut(role, usersPermissionsRolesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesRolePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(usersPostRequest: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(usersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersPermissionsUsersRolesApi.usersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsUsersRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.usersCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user
         * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
            return localVarFp.usersPermissionsPermissionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsRolesGet200Response> {
            return localVarFp.usersPermissionsRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
            return localVarFp.usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthForgotPasswordPost200Response> {
            return localVarFp.usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersPost(requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersIdDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for usersIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdGetRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersIdPut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdPutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdPutRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * Request parameters for usersPermissionsRolesIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersPermissionsRolesPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesPost
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPermissionsRolesRoleDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDelete
     */
    readonly role: string
}

/**
 * Request parameters for usersPermissionsRolesRolePut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly role: string

    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPostRequest {
    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPost
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi extends BaseAPI {
    /**
     * 
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersCountGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user
     * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersMeGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsPermissionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesGet(options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a user
     * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: RawAxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPost(requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebDevelopmentApi - axios parameter creator
 * @export
 */
export const WebDevelopmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebDevelopment: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/web-development`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebDevelopment: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/web-development`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WebDevelopmentRequest} webDevelopmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWebDevelopment: async (webDevelopmentRequest: WebDevelopmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webDevelopmentRequest' is not null or undefined
            assertParamExists('putWebDevelopment', 'webDevelopmentRequest', webDevelopmentRequest)
            const localVarPath = `/web-development`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webDevelopmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebDevelopmentApi - functional programming interface
 * @export
 */
export const WebDevelopmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebDevelopmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebDevelopment(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebDevelopment(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebDevelopmentApi.deleteWebDevelopment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {{ [key: string]: any; }} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebDevelopment(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: { [key: string]: any; }, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebDevelopmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebDevelopment(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebDevelopmentApi.getWebDevelopment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {WebDevelopmentRequest} webDevelopmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWebDevelopment(webDevelopmentRequest: WebDevelopmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebDevelopmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putWebDevelopment(webDevelopmentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebDevelopmentApi.putWebDevelopment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebDevelopmentApi - factory interface
 * @export
 */
export const WebDevelopmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebDevelopmentApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebDevelopment(options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteWebDevelopment(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebDevelopmentApiGetWebDevelopmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebDevelopment(requestParameters: WebDevelopmentApiGetWebDevelopmentRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<WebDevelopmentResponse> {
            return localVarFp.getWebDevelopment(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebDevelopmentApiPutWebDevelopmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWebDevelopment(requestParameters: WebDevelopmentApiPutWebDevelopmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebDevelopmentResponse> {
            return localVarFp.putWebDevelopment(requestParameters.webDevelopmentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getWebDevelopment operation in WebDevelopmentApi.
 * @export
 * @interface WebDevelopmentApiGetWebDevelopmentRequest
 */
export interface WebDevelopmentApiGetWebDevelopmentRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {{ [key: string]: any; }}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly filters?: { [key: string]: any; }

    /**
     * Locale to apply
     * @type {string}
     * @memberof WebDevelopmentApiGetWebDevelopment
     */
    readonly locale?: string
}

/**
 * Request parameters for putWebDevelopment operation in WebDevelopmentApi.
 * @export
 * @interface WebDevelopmentApiPutWebDevelopmentRequest
 */
export interface WebDevelopmentApiPutWebDevelopmentRequest {
    /**
     * 
     * @type {WebDevelopmentRequest}
     * @memberof WebDevelopmentApiPutWebDevelopment
     */
    readonly webDevelopmentRequest: WebDevelopmentRequest
}

/**
 * WebDevelopmentApi - object-oriented interface
 * @export
 * @class WebDevelopmentApi
 * @extends {BaseAPI}
 */
export class WebDevelopmentApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDevelopmentApi
     */
    public deleteWebDevelopment(options?: RawAxiosRequestConfig) {
        return WebDevelopmentApiFp(this.configuration).deleteWebDevelopment(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebDevelopmentApiGetWebDevelopmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDevelopmentApi
     */
    public getWebDevelopment(requestParameters: WebDevelopmentApiGetWebDevelopmentRequest = {}, options?: RawAxiosRequestConfig) {
        return WebDevelopmentApiFp(this.configuration).getWebDevelopment(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebDevelopmentApiPutWebDevelopmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebDevelopmentApi
     */
    public putWebDevelopment(requestParameters: WebDevelopmentApiPutWebDevelopmentRequest, options?: RawAxiosRequestConfig) {
        return WebDevelopmentApiFp(this.configuration).putWebDevelopment(requestParameters.webDevelopmentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



